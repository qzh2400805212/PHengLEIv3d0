#include <vector>

#include "HOBasisFunction.h"
#include "HODefine.h"
#include "HOStandardElement.h"
#include "HOGaussJacobiQuadrature.h"
#include "HOShapeFunction.h"

/*----------------------------------------------------------------------------------*/
/*         Protected member functions of CFEMStandardElementBase.                   */
/*----------------------------------------------------------------------------------*/
namespace HOUnstruct
{
HighOrderStandardElementBase::HighOrderStandardElementBase(unsigned short iVTK_Type,unsigned short iIntegrationOrder) 
{
    /*--- Copy the function arguments that must be stored in the member variables. ---*/
    VTK_Type = iVTK_Type;

    integrationOrder  = iIntegrationOrder;

    /*--- Determine the integration points. This depends on the element type. ---*/
    switch(VTK_Type)
    {
        case HOUnstruct::TRIANGLE:
            IntegrationPointsTriangle();
            break;
        case HOUnstruct::QUADRILATERAL:
            IntegrationPointsQuadrilateral();
            break;
        case HOUnstruct::TETRAHEDRON:
            IntegrationPointsTetrahedron();
            break;
        case HOUnstruct::PYRAMID:
            IntegrationPointsPyramid();
            break;
        case HOUnstruct::PRISM:
            IntegrationPointsPrism();
            break;
        case HOUnstruct::HEXAHEDRON:
            IntegrationPointsHexahedron();
            break;
        default:
            cout << "Wrong grid Type..../HighOrderStandardElementBase" << endl;
            break;
    }
}

void HighOrderStandardElementBase::IntegrationPointsQuadrilateral(void)
{
    /*--- The 2D quadrature rule is a tensor product of the 1D Gauss-Legendre quadrature rule. 
        First determine the number of integration points in 1D, which is stored in M, and determine them. ---*/
    unsigned short M = integrationOrder/2 + 1;
    
    vector<RDouble> GLPoints(M), GLWeights(M);
    GaussLegendrePoints1D(GLPoints, GLWeights);
    
    /*--- Allocate the memory for the integration points and weights and determine them.                ---*/
    nIntegrationPoint = M*M;
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);
    
    unsigned int ii = 0;
    for (unsigned short j=0; j<M; ++j)
    {
        for (unsigned short i=0; i<M; ++i, ++ii)
        {
            xiIntegration[ii] = GLPoints[i];
            etIntegration[ii] = GLPoints[j];
            wtIntegration[ii] = GLWeights[i]*GLWeights[j];
        }
    }
}

void HighOrderStandardElementBase::IntegrationPointsPrism(void)
{
    /*--- The 3D quadrature rule for a prism is a tensor product of the 1D Gauss-Legendre
          quadrature rule with the triangle quadrature rule. Determine the number of
          integration points in 1D, which is stored in M, and the actual integration
          1D integration points. ---*/
    unsigned short M = integrationOrder/2 + 1;
    
    vector<RDouble> GLPoints(M), GLWeights(M);
    GaussLegendrePoints1D(GLPoints, GLWeights);
    
    /*--- Also determine the integration rule for a triangle. ---*/
    IntegrationPointsTriangle();
    
    unsigned short nIntTriangle = nIntegrationPoint;
    vector<RDouble> rTriangle    = xiIntegration;
    vector<RDouble> sTriangle    = etIntegration;
    vector<RDouble> wTriangle    = wtIntegration;
    
    /*--- Allocate the memory for the integration points and weights
          of the prism and determine them.                ---*/
    nIntegrationPoint = M*nIntTriangle;
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    ztIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);

    unsigned int ii = 0;
    for (unsigned short k=0; k<M; ++k)
    {
        for (unsigned short j=0; j<nIntTriangle; ++j, ++ii)
        {
            xiIntegration[ii] = rTriangle[j];
            etIntegration[ii] = sTriangle[j];
            ztIntegration[ii] = GLPoints[k];
            wtIntegration[ii] = wTriangle[j]*GLWeights[k];
        }
    }
}

void HighOrderStandardElementBase::IntegrationPointsHexahedron(void)
{
    /*--- The 3D quadrature rule is a tensor product of the 1D Gauss-Legendre
          quadrature rule. Determine the number of integration points in 1D, which
          is stored in M, and the actual integration 1D integration points. ---*/
    unsigned short M = integrationOrder/2 + 1;
    
    vector<RDouble> GLPoints(M), GLWeights(M);
    GaussLegendrePoints1D(GLPoints, GLWeights);
    
    /*--- Allocate the memory for the integration points and weights
          of the hexahedron and determine them.                ---*/
    nIntegrationPoint = M*M*M;
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    ztIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);
    
    unsigned int ii = 0;
    for (unsigned short k=0; k<M; ++k)
    {
        for (unsigned short j=0; j<M; ++j)
        {
            for (unsigned short i=0; i<M; ++i, ++ii)
            {
                xiIntegration[ii] = GLPoints[i];
                etIntegration[ii] = GLPoints[j];
                ztIntegration[ii] = GLPoints[k];
                wtIntegration[ii] = GLWeights[i]*GLWeights[j]*GLWeights[k];
            }
        }
    }
}

void HighOrderStandardElementBase::IntegrationPointsTriangle(void)
{
    /*--- Set the number of integration points, depending on the order of
    polynomials that must be integrated exactly. ---*/
    switch(integrationOrder)
    {
        case  0:
        case  1: nIntegrationPoint =   1; break;
        case  2: nIntegrationPoint =   3; break;
        case  3:
        case  4: nIntegrationPoint =   6; break;
        case  5: nIntegrationPoint =   7; break;
        case  6: nIntegrationPoint =  12; break;
        case  7: nIntegrationPoint =  15; break;
        case  8: nIntegrationPoint =  16; break;
        case  9: nIntegrationPoint =  19; break;
        case 10: nIntegrationPoint =  25; break;
        case 11: nIntegrationPoint =  28; break;
        case 12: nIntegrationPoint =  36; break;
        case 13: nIntegrationPoint =  40; break;
        case 14: nIntegrationPoint =  46; break;
        case 15: nIntegrationPoint =  54; break;
        case 16: nIntegrationPoint =  58; break;
        case 17: nIntegrationPoint =  66; break;
        case 18: nIntegrationPoint =  73; break;
        case 19: nIntegrationPoint =  82; break;
        case 20: nIntegrationPoint =  85; break;
        default:
        //! notation MPI
        cout << "Error : HighOrderStandardElementBase has wrong integrationOrder " << endl;
    }

    /*--- Allocate the memory for the integration points and their weights. ---*/
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);
    
    /*--- Set the pointers to the data arrays of the variables just allocated, such
          that the names are shorter. This is useful for the code below. ---*/
    RDouble *r = xiIntegration.data();
    RDouble *s = etIntegration.data();
    RDouble *w = wtIntegration.data();
    
    /*--- Set the data for the integration points, depending on the order.
          These integration rules come from the Matlab codes corresponding to
          the book "Nodal Discontinuous Methods: Algorithms, Analysis, and Applications"
          by Jan S. Hesthaven and Tim Warburton. ---*/
    switch(integrationOrder)
    {
        case  0:
        case  1:
        {
            r[0] = -0.333333333333333; s[0] = -0.333333333333333; w[0] = 2.000000000000000;

            break;
        }
        case  2:
        {
            r[0] = -0.666666666666667; s[0] = -0.666666666666667; w[0] = 0.666666666666667;
            r[1] =  0.333333333333333; s[1] = -0.666666666666667; w[1] = 0.666666666666667;
            r[2] = -0.666666666666667; s[2] =  0.333333333333333; w[2] = 0.666666666666667;
            break;
        }
        case  3:
        case  4:
        {
            r[0] = -0.816847572980458; s[0] = -0.816847572980458; w[0] = 0.219903487310644;
            r[1] =  0.633695145960917; s[1] = -0.816847572980459; w[1] = 0.219903487310644;
            r[2] = -0.816847572980459; s[2] =  0.633695145960917; w[2] = 0.219903487310644;
            r[3] = -0.108103018168070; s[3] = -0.108103018168070; w[3] = 0.446763179356023;
            r[4] = -0.783793963663860; s[4] = -0.108103018168070; w[4] = 0.446763179356023;
            r[5] = -0.108103018168070; s[5] = -0.783793963663860; w[5] = 0.446763179356023;
            break;
        }
        case  5:
        {
            r[0] = -0.333333333333333; s[0] = -0.333333333333333; w[0] = 0.450000000000000;
            r[1] = -0.059715871789770; s[1] = -0.059715871789770; w[1] = 0.264788305577012;
            r[2] = -0.880568256420460; s[2] = -0.059715871789770; w[2] = 0.264788305577012;
            r[3] = -0.059715871789770; s[3] = -0.880568256420460; w[3] = 0.264788305577012;
            r[4] = -0.797426985353087; s[4] = -0.797426985353087; w[4] = 0.251878361089654;
            r[5] =  0.594853970706175; s[5] = -0.797426985353087; w[5] = 0.251878361089654;
            r[6] = -0.797426985353087; s[6] =  0.594853970706175; w[6] = 0.251878361089654;
            break;
        }
        case  6:
        {
            r[0]  = -0.501426509658179; s[0]  = -0.501426509658179; w[0]  = 0.233572551452759;
            r[1]  =  0.002853019316358; s[1]  = -0.501426509658179; w[1]  = 0.233572551452759;
            r[2]  = -0.501426509658179; s[2]  =  0.002853019316358; w[2]  = 0.233572551452759;
            r[3]  = -0.873821971016996; s[3]  = -0.873821971016996; w[3]  = 0.101689812740414;
            r[4]  =  0.747643942033991; s[4]  = -0.873821971016996; w[4]  = 0.101689812740414;
            r[5]  = -0.873821971016996; s[5]  =  0.747643942033991; w[5]  = 0.101689812740414;
            r[6]  = -0.379295097932431; s[6]  = -0.893709900310366; w[6]  = 0.165702151236747;
            r[7]  = -0.893709900310366; s[7]  = -0.379295097932431; w[7]  = 0.165702151236747;
            r[8]  =  0.273004998242797; s[8]  = -0.893709900310366; w[8]  = 0.165702151236747;
            r[9]  = -0.893709900310366; s[9]  =  0.273004998242797; w[9]  = 0.165702151236747;
            r[10] =  0.273004998242797; s[10] = -0.379295097932431; w[10] = 0.165702151236747;
            r[11] = -0.379295097932431; s[11] =  0.273004998242797; w[11] = 0.165702151236747;
            break;
        }
        case  7:
        {
            r[0]  = -0.158765070723907; s[0]  = -0.158765070723907; w[0]  = 0.278402959350494;
            r[1]  = -0.682469858552186; s[1]  = -0.158765070723907; w[1]  = 0.278402959350494;
            r[2]  = -0.158765070723907; s[2]  = -0.682469858552186; w[2]  = 0.278402959350494;
            r[3]  = -0.901937632421608; s[3]  = -0.901937632421608; w[3]  = 0.063653882657145;
            r[4]  =  0.803875264843215; s[4]  = -0.901937632421608; w[4]  = 0.063653882657145;
            r[5]  = -0.901937632421608; s[5]  =  0.803875264843215; w[5]  = 0.063653882657145;
            r[6]  = -0.696696002590528; s[6]  = -0.696696002590528; w[6]  = 0.168642646759703;
            r[7]  =  0.393392005181056; s[7]  = -0.696696002590528; w[7]  = 0.168642646759703;
            r[8]  = -0.696696002590528; s[8]  =  0.393392005181056; w[8]  = 0.168642646759703;
            r[9]  =  0.348275575962283; s[9]  = -0.375762055856278; w[9]  = 0.077983588949662;
            r[10] = -0.375762055856278; s[10] =  0.348275575962283; w[10] = 0.077983588949662;
            r[11] = -0.972513520106005; s[11] = -0.375762055856278; w[11] = 0.077983588949662;
            r[12] = -0.375762055856278; s[12] = -0.972513520106005; w[12] = 0.077983588949662;
            r[13] = -0.972513520106005; s[13] =  0.348275575962283; w[13] = 0.077983588949662;
            r[14] =  0.348275575962283; s[14] = -0.972513520106005; w[14] = 0.077983588949662;
            break;
        }
        case  8:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.288631215355574;
            r[1]  = -0.081414823414554; s[1]  = -0.081414823414554; w[1]  = 0.190183268534569;
            r[2]  = -0.837170353170893; s[2]  = -0.081414823414554; w[2]  = 0.190183268534569;
            r[3]  = -0.081414823414554; s[3]  = -0.837170353170893; w[3]  = 0.190183268534569;
            r[4]  = -0.658861384496480; s[4]  = -0.658861384496480; w[4]  = 0.206434741069437;
            r[5]  =  0.317722768992959; s[5]  = -0.658861384496480; w[5]  = 0.206434741069437;
            r[6]  = -0.658861384496480; s[6]  =  0.317722768992959; w[6]  = 0.206434741069437;
            r[7]  = -0.898905543365938; s[7]  = -0.898905543365938; w[7]  = 0.064916995246396;
            r[8]  =  0.797811086731876; s[8]  = -0.898905543365938; w[8]  = 0.064916995246396;
            r[9]  = -0.898905543365938; s[9]  =  0.797811086731876; w[9]  = 0.064916995246396;
            r[10] = -0.473774340730724; s[10] =  0.456984785910809; w[10] = 0.054460628348870;
            r[11] =  0.456984785910809; s[11] = -0.473774340730724; w[11] = 0.054460628348870;
            r[12] = -0.983210445180085; s[12] =  0.456984785910809; w[12] = 0.054460628348870;
            r[13] =  0.456984785910809; s[13] = -0.983210445180085; w[13] = 0.054460628348870;
            r[14] = -0.983210445180085; s[14] = -0.473774340730724; w[14] = 0.054460628348870;
            r[15] = -0.473774340730724; s[15] = -0.983210445180085; w[15] = 0.054460628348870;
            break;
        }
        case  9:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.194271592565598;
            r[1]  = -0.020634961602525; s[1]  = -0.020634961602525; w[1]  = 0.062669400454278;
            r[2]  = -0.958730076794950; s[2]  = -0.020634961602525; w[2]  = 0.062669400454278;
            r[3]  = -0.020634961602525; s[3]  = -0.958730076794950; w[3]  = 0.062669400454278;
            r[4]  = -0.125820817014127; s[4]  = -0.125820817014127; w[4]  = 0.155655082009549;
            r[5]  = -0.748358365971746; s[5]  = -0.125820817014127; w[5]  = 0.155655082009549;
            r[6]  = -0.125820817014127; s[6]  = -0.748358365971746; w[6]  = 0.155655082009549;
            r[7]  = -0.623592928761935; s[7]  = -0.623592928761935; w[7]  = 0.159295477854420;
            r[8]  =  0.247185857523869; s[8]  = -0.623592928761935; w[8]  = 0.159295477854420;
            r[9]  = -0.623592928761935; s[9]  =  0.247185857523869; w[9]  = 0.159295477854420;
            r[10] = -0.910540973211095; s[10] = -0.910540973211095; w[10] = 0.051155351317396;
            r[11] =  0.821081946422189; s[11] = -0.910540973211095; w[11] = 0.051155351317396;
            r[12] = -0.910540973211095; s[12] =  0.821081946422189; w[12] = 0.051155351317396;
            r[13] =  0.482397197568996; s[13] = -0.556074021678469; w[13] = 0.086567078754579;
            r[14] = -0.556074021678469; s[14] =  0.482397197568996; w[14] = 0.086567078754579;
            r[15] = -0.926323175890527; s[15] = -0.556074021678469; w[15] = 0.086567078754579;
            r[16] = -0.556074021678469; s[16] = -0.926323175890527; w[16] = 0.086567078754579;
            r[17] = -0.926323175890527; s[17] =  0.482397197568996; w[17] = 0.086567078754579;
            r[18] =  0.482397197568996; s[18] = -0.926323175890527; w[18] = 0.086567078754579;
            break;
        }
        case 10:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.167046799610393;
            r[1]  = -0.004269134091050; s[1]  = -0.004269134091050; w[1]  = 0.014459701184113;
            r[2]  = -0.991461731817899; s[2]  = -0.004269134091050; w[2]  = 0.014459701184113;
            r[3]  = -0.004269134091050; s[3]  = -0.991461731817899; w[3]  = 0.014459701184113;
            r[4]  = -0.143975100541888; s[4]  = -0.143975100541888; w[4]  = 0.148984355841961;
            r[5]  = -0.712049798916225; s[5]  = -0.143975100541888; w[5]  = 0.148984355841961;
            r[6]  = -0.143975100541888; s[6]  = -0.712049798916225; w[6]  = 0.148984355841961;
            r[7]  = -0.630487174513551; s[7]  = -0.630487174513551; w[7]  = 0.157292946806217;
            r[8]  =  0.260974349027102; s[8]  = -0.630487174513551; w[8]  = 0.157292946806217;
            r[9]  = -0.630487174513551; s[9]  =  0.260974349027102; w[9]  = 0.157292946806217;
            r[10] = -0.959037562856645; s[10] = -0.959037562856645; w[10] = 0.013856646174215;
            r[11] =  0.918075125713290; s[11] = -0.959037562856645; w[11] = 0.013856646174215;
            r[12] = -0.959037562856645; s[12] =  0.918075125713290; w[12] = 0.013856646174215;
            r[13] = -0.726852847487933; s[13] =  0.656846867693389; w[13] = 0.059036640669559;
            r[14] =  0.656846867693389; s[14] = -0.726852847487933; w[14] = 0.059036640669559;
            r[15] = -0.929994020205456; s[15] =  0.656846867693389; w[15] = 0.059036640669559;
            r[16] =  0.656846867693389; s[16] = -0.929994020205456; w[16] = 0.059036640669559;
            r[17] = -0.929994020205456; s[17] = -0.726852847487933; w[17] = 0.059036640669559;
            r[18] = -0.726852847487933; s[18] = -0.929994020205456; w[18] = 0.059036640669559;
            r[19] = -0.334512798822723; s[19] =  0.259414658305837; w[19] = 0.079158734392122;
            r[20] =  0.259414658305837; s[20] = -0.334512798822723; w[20] = 0.079158734392122;
            r[21] = -0.924901859483115; s[21] =  0.259414658305837; w[21] = 0.079158734392122;
            r[22] =  0.259414658305837; s[22] = -0.924901859483115; w[22] = 0.079158734392122;
            r[23] = -0.924901859483115; s[23] = -0.334512798822723; w[23] = 0.079158734392122;
            r[24] = -0.334512798822723; s[24] = -0.924901859483115; w[24] = 0.079158734392122;
            break;
        }
        case 11:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.171542269659139;
            r[1]  = -0.008227986519701; s[1]  = -0.008227986519701; w[1]  = 0.033232309648099;
            r[2]  = -0.983544026960598; s[2]  = -0.008227986519701; w[2]  = 0.033232309648099;
            r[3]  = -0.008227986519701; s[3]  = -0.983544026960598; w[3]  = 0.033232309648099;
            r[4]  = -0.123062767323470; s[4]  = -0.123062767323470; w[4]  = 0.134650934561697;
            r[5]  = -0.753874465353061; s[5]  = -0.123062767323470; w[5]  = 0.134650934561697;
            r[6]  = -0.123062767323470; s[6]  = -0.753874465353061; w[6]  = 0.134650934561697;
            r[7]  = -0.579583807314522; s[7]  = -0.579583807314522; w[7]  = 0.141045284213931;
            r[8]  =  0.159167614629044; s[8]  = -0.579583807314522; w[8]  = 0.141045284213931;
            r[9]  = -0.579583807314522; s[9]  =  0.159167614629044; w[9]  = 0.141045284213931;
            r[10] = -0.794793191450311; s[10] = -0.794793191450311; w[10] = 0.077255352409353;
            r[11] =  0.589586382900622; s[11] = -0.794793191450311; w[11] = 0.077255352409353;
            r[12] = -0.794793191450311; s[12] =  0.589586382900622; w[12] = 0.077255352409353;
            r[13] = -0.943045809035533; s[13] = -0.943045809035533; w[13] = 0.020851693311810;
            r[14] =  0.886091618071066; s[14] = -0.943045809035533; w[14] = 0.020851693311810;
            r[15] = -0.943045809035533; s[15] =  0.886091618071066; w[15] = 0.020851693311810;
            r[16] = -0.701412405190965; s[16] =  0.686811031831200; w[16] = 0.020556454130106;
            r[17] =  0.686811031831200; s[17] = -0.701412405190965; w[17] = 0.020556454130106;
            r[18] = -0.985398626640235; s[18] =  0.686811031831200; w[18] = 0.020556454130106;
            r[19] =  0.686811031831200; s[19] = -0.985398626640235; w[19] = 0.020556454130106;
            r[20] = -0.985398626640235; s[20] = -0.701412405190966; w[20] = 0.020556454130106;
            r[21] = -0.701412405190966; s[21] = -0.985398626640235; w[21] = 0.020556454130106;
            r[22] = -0.420944470627256; s[22] =  0.328932876191794; w[22] = 0.080668713854259;
            r[23] =  0.328932876191794; s[23] = -0.420944470627256; w[23] = 0.080668713854259;
            r[24] = -0.907988405564538; s[24] =  0.328932876191794; w[24] = 0.080668713854259;
            r[25] =  0.328932876191794; s[25] = -0.907988405564538; w[25] = 0.080668713854259;
            r[26] = -0.907988405564538; s[26] = -0.420944470627256; w[26] = 0.080668713854259;
            r[27] = -0.420944470627256; s[27] = -0.907988405564538; w[27] = 0.080668713854259;
            break;
        }
        case 12:
        {
            r[0]  = -0.115127288420454; s[0]  = -0.115127288420454; w[0]  = 0.088694050812375;
            r[1]  = -0.769745423159092; s[1]  = -0.115127288420454; w[1]  = 0.088694050812375;
            r[2]  = -0.115127288420454; s[2]  = -0.769745423159092; w[2]  = 0.088694050812375;
            r[3]  = -0.241326933740970; s[3]  = -0.241326933740970; w[3]  = 0.083486638970495;
            r[4]  = -0.517346132518060; s[4]  = -0.241326933740970; w[4]  = 0.083486638970495;
            r[5]  = -0.241326933740970; s[5]  = -0.517346132518060; w[5]  = 0.083486638970495;
            r[6]  = -0.773435586772427; s[6]  = -0.773435586772427; w[6]  = 0.061949370456958;
            r[7]  =  0.546871173544855; s[7]  = -0.773435586772427; w[7]  = 0.061949370456958;
            r[8]  = -0.773435586772427; s[8]  =  0.546871173544855; w[8]  = 0.061949370456958;
            r[9]  = -0.550360151853422; s[9]  = -0.550360151853422; w[9]  = 0.096926744607805;
            r[10] =  0.100720303706844; s[10] = -0.550360151853422; w[10] = 0.096926744607805;
            r[11] = -0.550360151853422; s[11] =  0.100720303706844; w[11] = 0.096926744607805;
            r[12] = -0.949850839686919; s[12] = -0.949850839686919; w[12] = 0.016284715813394;
            r[13] =  0.899701679373837; s[13] = -0.949850839686919; w[13] = 0.016284715813394;
            r[14] = -0.949850839686919; s[14] =  0.899701679373837; w[14] = 0.016284715813394;
            r[15] = -0.023247583079632; s[15] = -0.023247583079632; w[15] = 0.047730162209543;
            r[16] = -0.953504833840737; s[16] = -0.023247583079632; w[16] = 0.047730162209543;
            r[17] = -0.023247583079632; s[17] = -0.953504833840737; w[17] = 0.047730162209543;
            r[18] =  0.701114686742190; s[18] = -0.956341185792092; w[18] = 0.030740478172077;
            r[19] = -0.956341185792092; s[19] =  0.701114686742190; w[19] = 0.030740478172077;
            r[20] = -0.744773500950097; s[20] = -0.956341185792092; w[20] = 0.030740478172077;
            r[21] = -0.956341185792092; s[21] = -0.744773500950097; w[21] = 0.030740478172077;
            r[22] = -0.744773500950097; s[22] =  0.701114686742189; w[22] = 0.030740478172077;
            r[23] =  0.701114686742189; s[23] = -0.744773500950097; w[23] = 0.030740478172077;
            r[24] =  0.280974603820889; s[24] = -0.820754518409649; w[24] = 0.073364295183933;
            r[25] = -0.820754518409649; s[25] =  0.280974603820889; w[25] = 0.073364295183933;
            r[26] = -0.460220085411240; s[26] = -0.820754518409649; w[26] = 0.073364295183933;
            r[27] = -0.820754518409649; s[27] = -0.460220085411240; w[27] = 0.073364295183933;
            r[28] = -0.460220085411240; s[28] =  0.280974603820889; w[28] = 0.073364295183933;
            r[29] =  0.280974603820889; s[29] = -0.460220085411240; w[29] = 0.073364295183933;
            r[30] =  0.380092839755442; s[30] = -0.412599349012509; w[30] = 0.031692718542038;
            r[31] = -0.412599349012509; s[31] =  0.380092839755442; w[31] = 0.031692718542038;
            r[32] = -0.967493490742933; s[32] = -0.412599349012509; w[32] = 0.031692718542038;
            r[33] = -0.412599349012509; s[33] = -0.967493490742933; w[33] = 0.031692718542038;
            r[34] = -0.967493490742933; s[34] =  0.380092839755442; w[34] = 0.031692718542038;
            r[35] =  0.380092839755442; s[35] = -0.967493490742933; w[35] = 0.031692718542038;
            break;
        }
        case 13:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.097649880256618;
            r[1]  = -0.178369512906405; s[1]  = -0.178369512906405; w[1]  = 0.090830392435257;
            r[2]  = -0.643260974187191; s[2]  = -0.178369512906405; w[2]  = 0.090830392435257;
            r[3]  = -0.178369512906405; s[3]  = -0.643260974187191; w[3]  = 0.090830392435257;
            r[4]  = -0.542160866418819; s[4]  = -0.542160866418819; w[4]  = 0.093688172298398;
            r[5]  =  0.084321732837639; s[5]  = -0.542160866418819; w[5]  = 0.093688172298398;
            r[6]  = -0.542160866418819; s[6]  =  0.084321732837639; w[6]  = 0.093688172298398;
            r[7]  = -0.771083702251175; s[7]  = -0.771083702251175; w[7]  = 0.062636625766914;
            r[8]  =  0.542167404502350; s[8]  = -0.771083702251175; w[8]  = 0.062636625766914;
            r[9]  = -0.771083702251175; s[9]  =  0.542167404502350; w[9]  = 0.062636625766914;
            r[10] = -0.951222762153923; s[10] = -0.951222762153923; w[10] = 0.015384123058757;
            r[11] =  0.902445524307847; s[11] = -0.951222762153923; w[11] = 0.015384123058757;
            r[12] = -0.951222762153923; s[12] =  0.902445524307847; w[12] = 0.015384123058757;
            r[13] = -0.071124044893491; s[13] = -0.071124044893491; w[13] = 0.063336411850675;
            r[14] = -0.857751910213018; s[14] = -0.071124044893491; w[14] = 0.063336411850675;
            r[15] = -0.071124044893491; s[15] = -0.857751910213018; w[15] = 0.063336411850675;
            r[16] =  0.089497598920545; s[16] = -0.972567007080596; w[16] = 0.017363112895214;
            r[17] = -0.972567007080596; s[17] =  0.089497598920545; w[17] = 0.017363112895214;
            r[18] = -0.116930591839948; s[18] = -0.972567007080596; w[18] = 0.017363112895214;
            r[19] = -0.972567007080596; s[19] = -0.116930591839948; w[19] = 0.017363112895214;
            r[20] = -0.116930591839948; s[20] =  0.089497598920545; w[20] = 0.017363112895214;
            r[21] =  0.089497598920545; s[21] = -0.116930591839948; w[21] = 0.017363112895214;
            r[22] =  0.708303576893352; s[22] = -0.752827405974001; w[22] = 0.030203519313196;
            r[23] = -0.752827405974001; s[23] =  0.708303576893352; w[23] = 0.030203519313196;
            r[24] = -0.955476170919351; s[24] = -0.752827405974001; w[24] = 0.030203519313196;
            r[25] = -0.752827405974001; s[25] = -0.955476170919351; w[25] = 0.030203519313196;
            r[26] = -0.955476170919351; s[26] =  0.708303576893352; w[26] = 0.030203519313196;
            r[27] =  0.708303576893352; s[27] = -0.955476170919351; w[27] = 0.030203519313196;
            r[28] =  0.400693795223418; s[28] = -0.438009873048077; w[28] = 0.032954120635442;
            r[29] = -0.438009873048077; s[29] =  0.400693795223418; w[29] = 0.032954120635442;
            r[30] = -0.962683922175342; s[30] = -0.438009873048076; w[30] = 0.032954120635442;
            r[31] = -0.438009873048076; s[31] = -0.962683922175342; w[31] = 0.032954120635442;
            r[32] = -0.962683922175342; s[32] =  0.400693795223419; w[32] = 0.032954120635442;
            r[33] =  0.400693795223419; s[33] = -0.962683922175342; w[33] = 0.032954120635442;
            r[34] = -0.461147708177324; s[34] = -0.809703416305633; w[34] = 0.073599737741711;
            r[35] = -0.809703416305633; s[35] = -0.461147708177324; w[35] = 0.073599737741711;
            r[36] =  0.270851124482956; s[36] = -0.809703416305633; w[36] = 0.073599737741711;
            r[37] = -0.809703416305633; s[37] =  0.270851124482956; w[37] = 0.073599737741711;
            r[38] =  0.270851124482956; s[38] = -0.461147708177324; w[38] = 0.073599737741711;
            r[39] = -0.461147708177324; s[39] =  0.270851124482956; w[39] = 0.073599737741711;
            break;
        }
        case 14:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.086016161940337;
            r[1]  = -0.031437623162377; s[1]  = -0.031437623162377; w[1]  = 0.020861042581505;
            r[2]  = -0.937124753675245; s[2]  = -0.031437623162377; w[2]  = 0.020861042581505;
            r[3]  = -0.031437623162377; s[3]  = -0.937124753675245; w[3]  = 0.020861042581505;
            r[4]  = -0.190179067155837; s[4]  = -0.190179067155837; w[4]  = 0.084906577433761;
            r[5]  = -0.619641865688325; s[5]  = -0.190179067155837; w[5]  = 0.084906577433761;
            r[6]  = -0.190179067155837; s[6]  = -0.619641865688325; w[6]  = 0.084906577433761;
            r[7]  = -0.544945017724160; s[7]  = -0.544945017724160; w[7]  = 0.094412955694385;
            r[8]  =  0.089890035448320; s[8]  = -0.544945017724160; w[8]  = 0.094412955694385;
            r[9]  = -0.544945017724160; s[9]  =  0.089890035448320; w[9]  = 0.094412955694385;
            r[10] = -0.829084434528895; s[10] = -0.829084434528895; w[10] = 0.036931420530108;
            r[11] =  0.658168869057790; s[11] = -0.829084434528895; w[11] = 0.036931420530108;
            r[12] = -0.829084434528895; s[12] =  0.658168869057790; w[12] = 0.036931420530108;
            r[13] = -0.961731843229187; s[13] = -0.961731843229187; w[13] = 0.009566859223433;
            r[14] =  0.923463686458374; s[14] = -0.961731843229187; w[14] = 0.009566859223433;
            r[15] = -0.961731843229187; s[15] =  0.923463686458374; w[15] = 0.009566859223433;
            r[16] = -0.228055909294146; s[16] =  0.200257489743243; w[16] = 0.023873332102599;
            r[17] =  0.200257489743243; s[17] = -0.228055909294146; w[17] = 0.023873332102599;
            r[18] = -0.972201580449098; s[18] =  0.200257489743243; w[18] = 0.023873332102599;
            r[19] =  0.200257489743243; s[19] = -0.972201580449098; w[19] = 0.023873332102599;
            r[20] = -0.972201580449097; s[20] = -0.228055909294146; w[20] = 0.023873332102599;
            r[21] = -0.228055909294146; s[21] = -0.972201580449097; w[21] = 0.023873332102599;
            r[22] = -0.801926305237733; s[22] =  0.769518568627872; w[22] = 0.018006541968931;
            r[23] =  0.769518568627872; s[23] = -0.801926305237733; w[23] = 0.018006541968931;
            r[24] = -0.967592263390139; s[24] =  0.769518568627872; w[24] = 0.018006541968931;
            r[25] =  0.769518568627872; s[25] = -0.967592263390139; w[25] = 0.018006541968931;
            r[26] = -0.967592263390139; s[26] = -0.801926305237733; w[26] = 0.018006541968931;
            r[27] = -0.801926305237733; s[27] = -0.967592263390139; w[27] = 0.018006541968931;
            r[28] = -0.544893784145096; s[28] =  0.504355701557747; w[28] = 0.030117913357456;
            r[29] =  0.504355701557747; s[29] = -0.544893784145096; w[29] = 0.030117913357456;
            r[30] = -0.959461917412651; s[30] =  0.504355701557747; w[30] = 0.030117913357456;
            r[31] =  0.504355701557747; s[31] = -0.959461917412651; w[31] = 0.030117913357456;
            r[32] = -0.959461917412651; s[32] = -0.544893784145095; w[32] = 0.030117913357456;
            r[33] = -0.544893784145095; s[33] = -0.959461917412651; w[33] = 0.030117913357456;
            r[34] = -0.288429073961769; s[34] =  0.109399611316741; w[34] = 0.067035335144205;
            r[35] =  0.109399611316741; s[35] = -0.288429073961769; w[35] = 0.067035335144205;
            r[36] = -0.820970537354972; s[36] =  0.109399611316741; w[36] = 0.067035335144205;
            r[37] =  0.109399611316741; s[37] = -0.820970537354972; w[37] = 0.067035335144205;
            r[38] = -0.820970537354972; s[38] = -0.288429073961769; w[38] = 0.067035335144205;
            r[39] = -0.288429073961769; s[39] = -0.820970537354972; w[39] = 0.067035335144205;
            r[40] = -0.593507885280605; s[40] =  0.397658756992448; w[40] = 0.056624756038490;
            r[41] =  0.397658756992448; s[41] = -0.593507885280605; w[41] = 0.056624756038490;
            r[42] = -0.804150871711842; s[42] =  0.397658756992447; w[42] = 0.056624756038490;
            r[43] =  0.397658756992447; s[43] = -0.804150871711842; w[43] = 0.056624756038490;
            r[44] = -0.804150871711842; s[44] = -0.593507885280605; w[44] = 0.056624756038490;
            r[45] = -0.593507885280605; s[45] = -0.804150871711842; w[45] = 0.056624756038490;
            break;
        }
        case 15:
        {
            r[0]  = -0.083438407261750; s[0]  = -0.083438407261750; w[0]  = 0.065323637697611;
            r[1]  = -0.833123185476500; s[1]  = -0.083438407261750; w[1]  = 0.065323637697611;
            r[2]  = -0.083438407261750; s[2]  = -0.833123185476500; w[2]  = 0.065323637697611;
            r[3]  = -0.192779070841739; s[3]  = -0.192779070841739; w[3]  = 0.054825636062729;
            r[4]  = -0.614441858316522; s[4]  = -0.192779070841739; w[4]  = 0.054825636062729;
            r[5]  = -0.192779070841739; s[5]  = -0.614441858316522; w[5]  = 0.054825636062729;
            r[6]  = -0.413605664173949; s[6]  = -0.413605664173949; w[6]  = 0.053020073197407;
            r[7]  = -0.172788671652101; s[7]  = -0.413605664173949; w[7]  = 0.053020073197407;
            r[8]  = -0.413605664173949; s[8]  = -0.172788671652101; w[8]  = 0.053020073197407;
            r[9]  = -0.707064426114454; s[9]  = -0.707064426114454; w[9]  = 0.058431924272972;
            r[10] =  0.414128852228908; s[10] = -0.707064426114454; w[10] = 0.058431924272972;
            r[11] = -0.707064426114454; s[11] =  0.414128852228908; w[11] = 0.058431924272972;
            r[12] = -0.887274264668793; s[12] = -0.887274264668793; w[12] = 0.021169216132488;
            r[13] =  0.774548529337586; s[13] = -0.887274264668793; w[13] = 0.021169216132488;
            r[14] = -0.887274264668793; s[14] =  0.774548529337586; w[14] = 0.021169216132488;
            r[15] = -0.966849746283259; s[15] = -0.966849746283259; w[15] = 0.007229286128184;
            r[16] =  0.933699492566519; s[16] = -0.966849746283259; w[16] = 0.007229286128184;
            r[17] = -0.966849746283259; s[17] =  0.933699492566519; w[17] = 0.007229286128184;
            r[18] = -0.520930891690411; s[18] =  0.501106485071962; w[18] = 0.017055496203419;
            r[19] =  0.501106485071962; s[19] = -0.520930891690411; w[19] = 0.017055496203419;
            r[20] = -0.980175593381550; s[20] =  0.501106485071962; w[20] = 0.017055496203419;
            r[21] =  0.501106485071962; s[21] = -0.980175593381550; w[21] = 0.017055496203419;
            r[22] = -0.980175593381550; s[22] = -0.520930891690411; w[22] = 0.017055496203419;
            r[23] = -0.520930891690411; s[23] = -0.980175593381550; w[23] = 0.017055496203419;
            r[24] = -0.190242385363320; s[24] =  0.158634844102864; w[24] = 0.027832353033384;
            r[25] =  0.158634844102864; s[25] = -0.190242385363320; w[25] = 0.027832353033384;
            r[26] = -0.968392458739544; s[26] =  0.158634844102864; w[26] = 0.027832353033384;
            r[27] =  0.158634844102864; s[27] = -0.968392458739544; w[27] = 0.027832353033384;
            r[28] = -0.968392458739544; s[28] = -0.190242385363320; w[28] = 0.027832353033384;
            r[29] = -0.190242385363320; s[29] = -0.968392458739544; w[29] = 0.027832353033384;
            r[30] = -0.809995773773910; s[30] =  0.799708556139969; w[30] = 0.008583865881470;
            r[31] =  0.799708556139969; s[31] = -0.809995773773910; w[31] = 0.008583865881470;
            r[32] = -0.989712782366059; s[32] =  0.799708556139969; w[32] = 0.008583865881470;
            r[33] =  0.799708556139969; s[33] = -0.989712782366059; w[33] = 0.008583865881470;
            r[34] = -0.989712782366059; s[34] = -0.809995773773910; w[34] = 0.008583865881470;
            r[35] = -0.809995773773910; s[35] = -0.989712782366059; w[35] = 0.008583865881470;
            r[36] = -0.700493785355452; s[36] =  0.602649133849474; w[36] = 0.032470658563550;
            r[37] =  0.602649133849474; s[37] = -0.700493785355452; w[37] = 0.032470658563550;
            r[38] = -0.902155348494022; s[38] =  0.602649133849474; w[38] = 0.032470658563550;
            r[39] =  0.602649133849474; s[39] = -0.902155348494022; w[39] = 0.032470658563550;
            r[40] = -0.902155348494023; s[40] = -0.700493785355452; w[40] = 0.032470658563550;
            r[41] = -0.700493785355452; s[41] = -0.902155348494023; w[41] = 0.032470658563550;
            r[42] = -0.426160775117330; s[42] =  0.288623277852292; w[42] = 0.051214681842525;
            r[43] =  0.288623277852292; s[43] = -0.426160775117330; w[43] = 0.051214681842525;
            r[44] = -0.862462502734962; s[44] =  0.288623277852292; w[44] = 0.051214681842525;
            r[45] =  0.288623277852292; s[45] = -0.862462502734962; w[45] = 0.051214681842525;
            r[46] = -0.862462502734962; s[46] = -0.426160775117330; w[46] = 0.051214681842525;
            r[47] = -0.426160775117330; s[47] = -0.862462502734962; w[47] = 0.051214681842525;
            r[48] = -0.436328663801831; s[48] =  0.099519827552432; w[48] = 0.066176391063291;
            r[49] =  0.099519827552432; s[49] = -0.436328663801831; w[49] = 0.066176391063291;
            r[50] = -0.663191163750602; s[50] =  0.099519827552432; w[50] = 0.066176391063291;
            r[51] =  0.099519827552432; s[51] = -0.663191163750602; w[51] = 0.066176391063291;
            r[52] = -0.663191163750602; s[52] = -0.436328663801831; w[52] = 0.066176391063291;
            r[53] = -0.436328663801831; s[53] = -0.663191163750602; w[53] = 0.066176391063291;
            break;
        }
        case 16:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.092421202321849;
            r[1]  = -0.015796436959213; s[1]  = -0.015796436959213; w[1]  = 0.027991652734724;
            r[2]  = -0.968407126081574; s[2]  = -0.015796436959213; w[2]  = 0.027991652734724;
            r[3]  = -0.015796436959213; s[3]  = -0.968407126081574; w[3]  = 0.027991652734724;
            r[4]  = -0.087376299046785; s[4]  = -0.087376299046785; w[4]  = 0.036406763596424;
            r[5]  = -0.825247401906431; s[5]  = -0.087376299046785; w[5]  = 0.036406763596424;
            r[6]  = -0.087376299046785; s[6]  = -0.825247401906431; w[6]  = 0.036406763596424;
            r[7]  = -0.640498098534045; s[7]  = -0.640498098534045; w[7]  = 0.062729423327251;
            r[8]  =  0.280996197068091; s[8]  = -0.640498098534045; w[8]  = 0.062729423327251;
            r[9]  = -0.640498098534045; s[9]  =  0.280996197068091; w[9]  = 0.062729423327251;
            r[10] = -0.828211591878549; s[10] = -0.828211591878549; w[10] = 0.032217170192673;
            r[11] =  0.656423183757099; s[11] = -0.828211591878549; w[11] = 0.032217170192673;
            r[12] = -0.828211591878549; s[12] =  0.656423183757099; w[12] = 0.032217170192673;
            r[13] = -0.977882767295650; s[13] = -0.977882767295650; w[13] = 0.003676792575648;
            r[14] =  0.955765534591299; s[14] = -0.977882767295650; w[14] = 0.003676792575648;
            r[15] = -0.977882767295650; s[15] =  0.955765534591299; w[15] = 0.003676792575648;
            r[16] = -0.648594849699253; s[16] =  0.619534954455185; w[16] = 0.019075686313307;
            r[17] =  0.619534954455185; s[17] = -0.648594849699253; w[17] = 0.019075686313307;
            r[18] = -0.970940104755933; s[18] =  0.619534954455185; w[18] = 0.019075686313307;
            r[19] =  0.619534954455185; s[19] = -0.970940104755933; w[19] = 0.019075686313307;
            r[20] = -0.970940104755933; s[20] = -0.648594849699253; w[20] = 0.019075686313307;
            r[21] = -0.648594849699253; s[21] = -0.970940104755933; w[21] = 0.019075686313307;
            r[22] = -0.355089058161032; s[22] =  0.324703448463838; w[22] = 0.025111336723323;
            r[23] =  0.324703448463838; s[23] = -0.355089058161032; w[23] = 0.025111336723323;
            r[24] = -0.969614390302806; s[24] =  0.324703448463838; w[24] = 0.025111336723323;
            r[25] =  0.324703448463838; s[25] = -0.969614390302806; w[25] = 0.025111336723323;
            r[26] = -0.969614390302806; s[26] = -0.355089058161032; w[26] = 0.025111336723323;
            r[27] = -0.355089058161032; s[27] = -0.969614390302806; w[27] = 0.025111336723323;
            r[28] = -0.863082725186344; s[28] =  0.829810165174004; w[28] = 0.014134510743040;
            r[29] =  0.829810165174004; s[29] = -0.863082725186344; w[29] = 0.014134510743040;
            r[30] = -0.966727439987660; s[30] =  0.829810165174004; w[30] = 0.014134510743040;
            r[31] =  0.829810165174004; s[31] = -0.966727439987660; w[31] = 0.014134510743040;
            r[32] = -0.966727439987660; s[32] = -0.863082725186344; w[32] = 0.014134510743040;
            r[33] = -0.863082725186344; s[33] = -0.966727439987660; w[33] = 0.014134510743040;
            r[34] = -0.650110471151428; s[34] =  0.511910525190604; w[34] = 0.025255543672496;
            r[35] =  0.511910525190604; s[35] = -0.650110471151428; w[35] = 0.025255543672496;
            r[36] = -0.861800054039176; s[36] =  0.511910525190604; w[36] = 0.025255543672496;
            r[37] =  0.511910525190604; s[37] = -0.861800054039176; w[37] = 0.025255543672496;
            r[38] = -0.861800054039176; s[38] = -0.650110471151428; w[38] = 0.025255543672496;
            r[39] = -0.650110471151428; s[39] = -0.861800054039176; w[39] = 0.025255543672496;
            r[40] = -0.282624366842035; s[40] =  0.131065359625217; w[40] = 0.038432852520849;
            r[41] =  0.131065359625217; s[41] = -0.282624366842035; w[41] = 0.038432852520849;
            r[42] = -0.848440992783182; s[42] =  0.131065359625217; w[42] = 0.038432852520849;
            r[43] =  0.131065359625217; s[43] = -0.848440992783182; w[43] = 0.038432852520849;
            r[44] = -0.848440992783182; s[44] = -0.282624366842035; w[44] = 0.038432852520849;
            r[45] = -0.282624366842035; s[45] = -0.848440992783182; w[45] = 0.038432852520849;
            r[46] = -0.500121711290305; s[46] =  0.333566061453817; w[46] = 0.032993291211606;
            r[47] =  0.333566061453817; s[47] = -0.500121711290305; w[47] = 0.032993291211606;
            r[48] = -0.833444350163512; s[48] =  0.333566061453817; w[48] = 0.032993291211606;
            r[49] =  0.333566061453817; s[49] = -0.833444350163512; w[49] = 0.032993291211606;
            r[50] = -0.833444350163512; s[50] = -0.500121711290305; w[50] = 0.032993291211606;
            r[51] = -0.500121711290305; s[51] = -0.833444350163512; w[51] = 0.032993291211606;
            r[52] = -0.353308953197778; s[52] = -0.027538833736648; w[52] = 0.081415677215044;
            r[53] = -0.027538833736648; s[53] = -0.353308953197778; w[53] = 0.081415677215044;
            r[54] = -0.619152213065573; s[54] = -0.027538833736648; w[54] = 0.081415677215044;
            r[55] = -0.027538833736648; s[55] = -0.619152213065573; w[55] = 0.081415677215044;
            r[56] = -0.619152213065573; s[56] = -0.353308953197778; w[56] = 0.081415677215044;
            r[57] = -0.353308953197778; s[57] = -0.619152213065573; w[57] = 0.081415677215044;
            break;
        }
        case 17:
        {
            r[0]  = -0.013565183960096; s[0]  = -0.013565183960096; w[0]  = 0.022448424077156;
            r[1]  = -0.972869632079808; s[1]  = -0.013565183960096; w[1]  = 0.022448424077156;
            r[2]  = -0.013565183960096; s[2]  = -0.972869632079808; w[2]  = 0.022448424077156;
            r[3]  = -0.918012666387151; s[3]  = -0.918012666387151; w[3]  = 0.011377816766740;
            r[4]  =  0.836025332774302; s[4]  = -0.918012666387151; w[4]  = 0.011377816766740;
            r[5]  = -0.918012666387151; s[5]  =  0.836025332774302; w[5]  = 0.011377816766740;
            r[6]  = -0.469265478050798; s[6]  = -0.469265478050798; w[6]  = 0.056148078797670;
            r[7]  = -0.061469043898404; s[7]  = -0.469265478050798; w[7]  = 0.056148078797670;
            r[8]  = -0.469265478050798; s[8]  = -0.061469043898404; w[8]  = 0.056148078797670;
            r[9]  = -0.278161974512876; s[9]  = -0.278161974512876; w[9]  = 0.031804753050686;
            r[10] = -0.443676050974249; s[10] = -0.278161974512876; w[10] = 0.031804753050686;
            r[11] = -0.278161974512876; s[11] = -0.443676050974249; w[11] = 0.031804753050686;
            r[12] = -0.743831619059579; s[12] = -0.743831619059579; w[12] = 0.042944604159838;
            r[13] =  0.487663238119159; s[13] = -0.743831619059579; w[13] = 0.042944604159838;
            r[14] = -0.743831619059579; s[14] =  0.487663238119159; w[14] = 0.042944604159838;
            r[15] = -0.975086972700342; s[15] = -0.975086972700342; w[15] = 0.004138336267131;
            r[16] =  0.950173945400684; s[16] = -0.975086972700342; w[16] = 0.004138336267131;
            r[17] = -0.975086972700342; s[17] =  0.950173945400684; w[17] = 0.004138336267131;
            r[18] = -0.331485915788080; s[18] =  0.305875449252880; w[18] = 0.020094111670483;
            r[19] =  0.305875449252880; s[19] = -0.331485915788080; w[19] = 0.020094111670483;
            r[20] = -0.974389533464800; s[20] =  0.305875449252880; w[20] = 0.020094111670483;
            r[21] =  0.305875449252880; s[21] = -0.974389533464800; w[21] = 0.020094111670483;
            r[22] = -0.974389533464800; s[22] = -0.331485915788080; w[22] = 0.020094111670483;
            r[23] = -0.331485915788080; s[23] = -0.974389533464800; w[23] = 0.020094111670483;
            r[24] = -0.617368143234940; s[24] =  0.598534426856625; w[24] = 0.013023443943004;
            r[25] =  0.598534426856625; s[25] = -0.617368143234940; w[25] = 0.013023443943004;
            r[26] = -0.981166283621686; s[26] =  0.598534426856625; w[26] = 0.013023443943004;
            r[27] =  0.598534426856625; s[27] = -0.981166283621686; w[27] = 0.013023443943004;
            r[28] = -0.981166283621686; s[28] = -0.617368143234940; w[28] = 0.013023443943004;
            r[29] = -0.617368143234940; s[29] = -0.981166283621686; w[29] = 0.013023443943004;
            r[30] = -0.846737941679184; s[30] =  0.837351785097968; w[30] = 0.005856954369545;
            r[31] =  0.837351785097968; s[31] = -0.846737941679184; w[31] = 0.005856954369545;
            r[32] = -0.990613843418784; s[32] =  0.837351785097968; w[32] = 0.005856954369545;
            r[33] =  0.837351785097968; s[33] = -0.990613843418784; w[33] = 0.005856954369545;
            r[34] = -0.990613843418784; s[34] = -0.846737941679184; w[34] = 0.005856954369545;
            r[35] = -0.846737941679184; s[35] = -0.990613843418784; w[35] = 0.005856954369545;
            r[36] = -0.530582382227094; s[36] =  0.412831673770520; w[36] = 0.037746172643499;
            r[37] =  0.412831673770520; s[37] = -0.530582382227094; w[37] = 0.037746172643499;
            r[38] = -0.882249291543426; s[38] =  0.412831673770520; w[38] = 0.037746172643499;
            r[39] =  0.412831673770520; s[39] = -0.882249291543426; w[39] = 0.037746172643499;
            r[40] = -0.882249291543426; s[40] = -0.530582382227094; w[40] = 0.037746172643499;
            r[41] = -0.530582382227094; s[41] = -0.882249291543426; w[41] = 0.037746172643499;
            r[42] = -0.230167008731505; s[42] =  0.092655855430620; w[42] = 0.048362752988591;
            r[43] =  0.092655855430620; s[43] = -0.230167008731505; w[43] = 0.048362752988591;
            r[44] = -0.862488846699115; s[44] =  0.092655855430620; w[44] = 0.048362752988591;
            r[45] =  0.092655855430620; s[45] = -0.862488846699115; w[45] = 0.048362752988591;
            r[46] = -0.862488846699115; s[46] = -0.230167008731505; w[46] = 0.048362752988591;
            r[47] = -0.230167008731505; s[47] = -0.862488846699115; w[47] = 0.048362752988591;
            r[48] = -0.769841956364772; s[48] =  0.681416462088999; w[48] = 0.023467126169388;
            r[49] =  0.681416462088999; s[49] = -0.769841956364772; w[49] = 0.023467126169388;
            r[50] = -0.911574505724228; s[50] =  0.681416462088999; w[50] = 0.023467126169388;
            r[51] =  0.681416462088999; s[51] = -0.911574505724228; w[51] = 0.023467126169388;
            r[52] = -0.911574505724228; s[52] = -0.769841956364772; w[52] = 0.023467126169388;
            r[53] = -0.769841956364772; s[53] = -0.911574505724228; w[53] = 0.023467126169388;
            r[54] = -0.502901760016855; s[54] =  0.206946937904245; w[54] = 0.054703428836887;
            r[55] =  0.206946937904245; s[55] = -0.502901760016855; w[55] = 0.054703428836887;
            r[56] = -0.704045177887389; s[56] =  0.206946937904245; w[56] = 0.054703428836887;
            r[57] =  0.206946937904245; s[57] = -0.704045177887389; w[57] = 0.054703428836887;
            r[58] = -0.704045177887389; s[58] = -0.502901760016855; w[58] = 0.054703428836887;
            r[59] = -0.502901760016855; s[59] = -0.704045177887389; w[59] = 0.054703428836887;
            r[60] = -0.258115377755090; s[60] = -0.067105414124881; w[60] = 0.045648336152327;
            r[61] = -0.067105414124881; s[61] = -0.258115377755090; w[61] = 0.045648336152327;
            r[62] = -0.674779208120030; s[62] = -0.067105414124880; w[62] = 0.045648336152327;
            r[63] = -0.067105414124880; s[63] = -0.674779208120030; w[63] = 0.045648336152327;
            r[64] = -0.674779208120030; s[64] = -0.258115377755090; w[64] = 0.045648336152327;
            r[65] = -0.258115377755090; s[65] = -0.674779208120030; w[65] = 0.045648336152327;
            break;
        }
        case 18:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.044365924378076;
            r[1]  = -0.012131216528029; s[1]  = -0.012131216528029; w[1]  = 0.019118866558615;
            r[2]  = -0.975737566943942; s[2]  = -0.012131216528029; w[2]  = 0.019118866558615;
            r[3]  = -0.012131216528029; s[3]  = -0.975737566943942; w[3]  = 0.019118866558615;
            r[4]  = -0.230136518749796; s[4]  = -0.230136518749796; w[4]  = 0.049294282264207;
            r[5]  = -0.539726962500408; s[5]  = -0.230136518749796; w[5]  = 0.049294282264207;
            r[6]  = -0.230136518749796; s[6]  = -0.539726962500408; w[6]  = 0.049294282264207;
            r[7]  = -0.499402807850562; s[7]  = -0.499402807850562; w[7]  = 0.060654125981259;
            r[8]  = -0.001194384298875; s[8]  = -0.499402807850563; w[8]  = 0.060654125981259;
            r[9]  = -0.499402807850563; s[9]  = -0.001194384298875; w[9]  = 0.060654125981259;
            r[10] = -0.710045241598598; s[10] = -0.710045241598598; w[10] = 0.031366231844497;
            r[11] =  0.420090483197196; s[11] = -0.710045241598598; w[11] = 0.031366231844497;
            r[12] = -0.710045241598598; s[12] =  0.420090483197196; w[12] = 0.031366231844497;
            r[13] = -0.903019171569391; s[13] = -0.903019171569391; w[13] = 0.016173035699059;
            r[14] =  0.806038343138783; s[14] = -0.903019171569391; w[14] = 0.016173035699059;
            r[15] = -0.903019171569391; s[15] =  0.806038343138783; w[15] = 0.016173035699059;
            r[16] = -0.972866921676664; s[16] = -0.972866921676664; w[16] = 0.004750076743416;
            r[17] =  0.945733843353328; s[17] = -0.972866921676664; w[17] = 0.004750076743416;
            r[18] = -0.972866921676664; s[18] =  0.945733843353328; w[18] = 0.004750076743416;
            r[19] = -0.859848143426920; s[19] =  0.852682278520227; w[19] = 0.004329998364046;
            r[20] =  0.852682278520227; s[20] = -0.859848143426920; w[20] = 0.004329998364046;
            r[21] = -0.992834135093306; s[21] =  0.852682278520227; w[21] = 0.004329998364046;
            r[22] =  0.852682278520227; s[22] = -0.992834135093306; w[22] = 0.004329998364046;
            r[23] = -0.992834135093306; s[23] = -0.859848143426920; w[23] = 0.004329998364046;
            r[24] = -0.859848143426920; s[24] = -0.992834135093306; w[24] = 0.004329998364046;
            r[25] = -0.592208428296456; s[25] =  0.573110619333459; w[25] = 0.012300136592151;
            r[26] =  0.573110619333459; s[26] = -0.592208428296456; w[26] = 0.012300136592151;
            r[27] = -0.980902191037003; s[27] =  0.573110619333459; w[27] = 0.012300136592151;
            r[28] =  0.573110619333459; s[28] = -0.980902191037003; w[28] = 0.012300136592151;
            r[29] = -0.980902191037003; s[29] = -0.592208428296456; w[29] = 0.012300136592151;
            r[30] = -0.592208428296456; s[30] = -0.980902191037003; w[30] = 0.012300136592151;
            r[31] = -0.316660705097116; s[31] =  0.294011442575493; w[31] = 0.017146550496094;
            r[32] =  0.294011442575493; s[32] = -0.316660705097116; w[32] = 0.017146550496094;
            r[33] = -0.977350737478378; s[33] =  0.294011442575493; w[33] = 0.017146550496094;
            r[34] =  0.294011442575493; s[34] = -0.977350737478378; w[34] = 0.017146550496094;
            r[35] = -0.977350737478378; s[35] = -0.316660705097116; w[35] = 0.017146550496094;
            r[36] = -0.316660705097116; s[36] = -0.977350737478378; w[36] = 0.017146550496094;
            r[37] = -0.762708275393600; s[37] =  0.720805143081058; w[37] = 0.010992784367686;
            r[38] =  0.720805143081058; s[38] = -0.762708275393600; w[38] = 0.010992784367686;
            r[39] = -0.958096867687458; s[39] =  0.720805143081058; w[39] = 0.010992784367686;
            r[40] =  0.720805143081058; s[40] = -0.958096867687458; w[40] = 0.010992784367686;
            r[41] = -0.958096867687458; s[41] = -0.762708275393600; w[41] = 0.010992784367686;
            r[42] = -0.762708275393600; s[42] = -0.958096867687458; w[42] = 0.010992784367686;
            r[43] = -0.499464753852078; s[43] =  0.389673957377540; w[43] = 0.033988423627451;
            r[44] =  0.389673957377540; s[44] = -0.499464753852078; w[44] = 0.033988423627451;
            r[45] = -0.890209203525462; s[45] =  0.389673957377540; w[45] = 0.033988423627451;
            r[46] =  0.389673957377540; s[46] = -0.890209203525462; w[46] = 0.033988423627451;
            r[47] = -0.890209203525462; s[47] = -0.499464753852078; w[47] = 0.033988423627451;
            r[48] = -0.499464753852078; s[48] = -0.890209203525462; w[48] = 0.033988423627451;
            r[49] = -0.730193961187213; s[49] =  0.595225312221749; w[49] = 0.025768775250048;
            r[50] =  0.595225312221749; s[50] = -0.730193961187213; w[50] = 0.025768775250048;
            r[51] = -0.865031351034536; s[51] =  0.595225312221749; w[51] = 0.025768775250048;
            r[52] =  0.595225312221749; s[52] = -0.865031351034536; w[52] = 0.025768775250048;
            r[53] = -0.865031351034535; s[53] = -0.730193961187213; w[53] = 0.025768775250048;
            r[54] = -0.730193961187213; s[54] = -0.865031351034535; w[54] = 0.025768775250048;
            r[55] = -0.213662181077459; s[55] =  0.092159471784540; w[55] = 0.040023698716305;
            r[56] =  0.092159471784540; s[56] = -0.213662181077459; w[56] = 0.040023698716305;
            r[57] = -0.878497290707081; s[57] =  0.092159471784540; w[57] = 0.040023698716305;
            r[58] =  0.092159471784540; s[58] = -0.878497290707081; w[58] = 0.040023698716305;
            r[59] = -0.878497290707081; s[59] = -0.213662181077459; w[59] = 0.040023698716305;
            r[60] = -0.213662181077459; s[60] = -0.878497290707081; w[60] = 0.040023698716305;
            r[61] = -0.268906542375276; s[61] = -0.010964677486621; w[61] = 0.045277248097616;
            r[62] = -0.010964677486621; s[62] = -0.268906542375276; w[62] = 0.045277248097616;
            r[63] = -0.720128780138103; s[63] = -0.010964677486621; w[63] = 0.045277248097616;
            r[64] = -0.010964677486621; s[64] = -0.720128780138103; w[64] = 0.045277248097616;
            r[65] = -0.720128780138103; s[65] = -0.268906542375276; w[65] = 0.045277248097616;
            r[66] = -0.268906542375276; s[66] = -0.720128780138103; w[66] = 0.045277248097616;
            r[67] = -0.507963230765286; s[67] =  0.233062121320884; w[67] = 0.045433087546729;
            r[68] =  0.233062121320884; s[68] = -0.507963230765286; w[68] = 0.045433087546729;
            r[69] = -0.725098890555598; s[69] =  0.233062121320884; w[69] = 0.045433087546729;
            r[70] =  0.233062121320884; s[70] = -0.725098890555598; w[70] = 0.045433087546729;
            r[71] = -0.725098890555598; s[71] = -0.507963230765286; w[71] = 0.045433087546729;
            r[72] = -0.507963230765286; s[72] = -0.725098890555598; w[72] = 0.045433087546729;
            break;
        }
        case 19:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.041424760048010;
            r[1]  = -0.121193890022463; s[1]  = -0.121193890022463; w[1]  = 0.031784855337689;
            r[2]  = -0.757612219955075; s[2]  = -0.121193890022463; w[2]  = 0.031784855337689;
            r[3]  = -0.121193890022463; s[3]  = -0.757612219955075; w[3]  = 0.031784855337689;
            r[4]  = -0.227921589064499; s[4]  = -0.227921589064499; w[4]  = 0.048406599909930;
            r[5]  = -0.544156821871001; s[5]  = -0.227921589064499; w[5]  = 0.048406599909930;
            r[6]  = -0.227921589064499; s[6]  = -0.544156821871001; w[6]  = 0.048406599909930;
            r[7]  = -0.480832787187258; s[7]  = -0.480832787187258; w[7]  = 0.048177661858475;
            r[8]  = -0.038334425625484; s[8]  = -0.480832787187258; w[8]  = 0.048177661858475;
            r[9]  = -0.480832787187258; s[9]  = -0.038334425625484; w[9]  = 0.048177661858475;
            r[10] = -0.607587000462791; s[10] = -0.607587000462791; w[10] = 0.042691162490028;
            r[11] =  0.215174000925582; s[11] = -0.607587000462791; w[11] = 0.042691162490028;
            r[12] = -0.607587000462791; s[12] =  0.215174000925582; w[12] = 0.042691162490028;
            r[13] = -0.728032884013154; s[13] = -0.728032884013154; w[13] = 0.031889013978028;
            r[14] =  0.456065768026307; s[14] = -0.728032884013154; w[14] = 0.031889013978028;
            r[15] = -0.728032884013154; s[15] =  0.456065768026307; w[15] = 0.031889013978028;
            r[16] = -0.884999963315497; s[16] = -0.884999963315497; w[16] = 0.015529272923518;
            r[17] =  0.769999926630994; s[17] = -0.884999963315497; w[17] = 0.015529272923518;
            r[18] = -0.884999963315497; s[18] =  0.769999926630994; w[18] = 0.015529272923518;
            r[19] = -0.973927705240279; s[19] = -0.973927705240279; w[19] = 0.004442852871415;
            r[20] =  0.947855410480559; s[20] = -0.973927705240279; w[20] = 0.004442852871415;
            r[21] = -0.973927705240279; s[21] =  0.947855410480559; w[21] = 0.004442852871415;
            r[22] = -0.419340397282846; s[22] =  0.418549313572482; w[22] = 0.004599409024561;
            r[23] =  0.418549313572482; s[23] = -0.419340397282846; w[23] = 0.004599409024561;
            r[24] = -0.999208916289636; s[24] =  0.418549313572482; w[24] = 0.004599409024561;
            r[25] =  0.418549313572482; s[25] = -0.999208916289636; w[25] = 0.004599409024561;
            r[26] = -0.999208916289636; s[26] = -0.419340397282846; w[26] = 0.004599409024561;
            r[27] = -0.419340397282846; s[27] = -0.999208916289636; w[27] = 0.004599409024561;
            r[28] = -0.154285565801825; s[28] =  0.131285016869205; w[28] = 0.016608327001253;
            r[29] =  0.131285016869205; s[29] = -0.154285565801825; w[29] = 0.016608327001253;
            r[30] = -0.976999451067380; s[30] =  0.131285016869205; w[30] = 0.016608327001253;
            r[31] =  0.131285016869205; s[31] = -0.976999451067380; w[31] = 0.016608327001253;
            r[32] = -0.976999451067380; s[32] = -0.154285565801825; w[32] = 0.016608327001253;
            r[33] = -0.154285565801825; s[33] = -0.976999451067380; w[33] = 0.016608327001253;
            r[34] = -0.864328042937615; s[34] =  0.842262778125134; w[34] = 0.008508350664254;
            r[35] =  0.842262778125134; s[35] = -0.864328042937615; w[35] = 0.008508350664254;
            r[36] = -0.977934735187519; s[36] =  0.842262778125134; w[36] = 0.008508350664254;
            r[37] =  0.842262778125134; s[37] = -0.977934735187519; w[37] = 0.008508350664254;
            r[38] = -0.977934735187519; s[38] = -0.864328042937615; w[38] = 0.008508350664254;
            r[39] = -0.864328042937615; s[39] = -0.977934735187519; w[39] = 0.008508350664254;
            r[40] = -0.676980679779850; s[40] =  0.654351228666662; w[40] = 0.012752760516072;
            r[41] =  0.654351228666662; s[41] = -0.676980679779850; w[41] = 0.012752760516072;
            r[42] = -0.977370548886812; s[42] =  0.654351228666662; w[42] = 0.012752760516072;
            r[43] =  0.654351228666662; s[43] = -0.977370548886812; w[43] = 0.012752760516072;
            r[44] = -0.977370548886812; s[44] = -0.676980679779850; w[44] = 0.012752760516072;
            r[45] = -0.676980679779850; s[45] = -0.977370548886812; w[45] = 0.012752760516072;
            r[46] = -0.451038034994882; s[46] =  0.391933493150074; w[46] = 0.024864731137205;
            r[47] =  0.391933493150074; s[47] = -0.451038034994882; w[47] = 0.024864731137205;
            r[48] = -0.940895458155192; s[48] =  0.391933493150074; w[48] = 0.024864731137205;
            r[49] =  0.391933493150074; s[49] = -0.940895458155192; w[49] = 0.024864731137205;
            r[50] = -0.940895458155192; s[50] = -0.451038034994882; w[50] = 0.024864731137205;
            r[51] = -0.451038034994882; s[51] = -0.940895458155192; w[51] = 0.024864731137205;
            r[52] = -0.755079003035426; s[52] =  0.643775758022122; w[52] = 0.012779469878381;
            r[53] =  0.643775758022122; s[53] = -0.755079003035426; w[53] = 0.012779469878381;
            r[54] = -0.888696754986697; s[54] =  0.643775758022122; w[54] = 0.012779469878381;
            r[55] =  0.643775758022122; s[55] = -0.888696754986697; w[55] = 0.012779469878381;
            r[56] = -0.888696754986697; s[56] = -0.755079003035426; w[56] = 0.012779469878381;
            r[57] = -0.755079003035426; s[57] = -0.888696754986697; w[57] = 0.012779469878381;
            r[58] = -0.668500025831376; s[58] =  0.544622467980326; w[58] = 0.017801502950615;
            r[59] =  0.544622467980326; s[59] = -0.668500025831376; w[59] = 0.017801502950615;
            r[60] = -0.876122442148950; s[60] =  0.544622467980326; w[60] = 0.017801502950615;
            r[61] =  0.544622467980326; s[61] = -0.876122442148950; w[61] = 0.017801502950615;
            r[62] = -0.876122442148950; s[62] = -0.668500025831376; w[62] = 0.017801502950615;
            r[63] = -0.668500025831376; s[63] = -0.876122442148950; w[63] = 0.017801502950615;
            r[64] = -0.205954158284095; s[64] =  0.090524206162520; w[64] = 0.035738233266717;
            r[65] =  0.090524206162520; s[65] = -0.205954158284095; w[65] = 0.035738233266717;
            r[66] = -0.884570047878425; s[66] =  0.090524206162520; w[66] = 0.035738233266717;
            r[67] =  0.090524206162520; s[67] = -0.884570047878425; w[67] = 0.035738233266717;
            r[68] = -0.884570047878425; s[68] = -0.205954158284095; w[68] = 0.035738233266717;
            r[69] = -0.205954158284095; s[69] = -0.884570047878425; w[69] = 0.035738233266717;
            r[70] = -0.488476686471250; s[70] =  0.295757669634562; w[70] = 0.038344199404453;
            r[71] =  0.295757669634562; s[71] = -0.488476686471250; w[71] = 0.038344199404453;
            r[72] = -0.807280983163311; s[72] =  0.295757669634562; w[72] = 0.038344199404453;
            r[73] =  0.295757669634562; s[73] = -0.807280983163311; w[73] = 0.038344199404453;
            r[74] = -0.807280983163311; s[74] = -0.488476686471250; w[74] = 0.038344199404453;
            r[75] = -0.488476686471250; s[75] = -0.807280983163311; w[75] = 0.038344199404453;
            r[76] = -0.342507806805715; s[76] =  0.042214391480752; w[76] = 0.042971513130613;
            r[77] =  0.042214391480752; s[77] = -0.342507806805715; w[77] = 0.042971513130613;
            r[78] = -0.699706584675037; s[78] =  0.042214391480751; w[78] = 0.042971513130613;
            r[79] =  0.042214391480751; s[79] = -0.699706584675037; w[79] = 0.042971513130613;
            r[80] = -0.699706584675037; s[80] = -0.342507806805715; w[80] = 0.042971513130613;
            r[81] = -0.342507806805715; s[81] = -0.699706584675037; w[81] = 0.042971513130613;
            break;
        }
        case 20:
        {
            r[0]  = -0.333333333333333; s[0]  = -0.333333333333333; w[0]  = 0.055220853995399;
            r[1]  = -0.001500649324429; s[1]  = -0.001500649324429; w[1]  = 0.003558059094653;
            r[2]  = -0.996998701351142; s[2]  = -0.001500649324429; w[2]  = 0.003558059094653;
            r[3]  = -0.001500649324429; s[3]  = -0.996998701351142; w[3]  = 0.003558059094653;
            r[4]  = -0.094139751938951; s[4]  = -0.094139751938951; w[4]  = 0.040224796227922;
            r[5]  = -0.811720496122098; s[5]  = -0.094139751938951; w[5]  = 0.040224796227922;
            r[6]  = -0.094139751938951; s[6]  = -0.811720496122098; w[6]  = 0.040224796227922;
            r[7]  = -0.204472124089526; s[7]  = -0.204472124089526; w[7]  = 0.053635694518663;
            r[8]  = -0.591055751820947; s[8]  = -0.204472124089526; w[8]  = 0.053635694518663;
            r[9]  = -0.204472124089526; s[9]  = -0.591055751820947; w[9]  = 0.053635694518663;
            r[10] = -0.470999594934425; s[10] = -0.470999594934425; w[10] = 0.049046267603004;
            r[11] = -0.058000810131149; s[11] = -0.470999594934425; w[11] = 0.049046267603004;
            r[12] = -0.470999594934425; s[12] = -0.058000810131149; w[12] = 0.049046267603004;
            r[13] = -0.577962071815846; s[13] = -0.577962071815846; w[13] = 0.032789156821391;
            r[14] =  0.155924143631693; s[14] = -0.577962071815846; w[14] = 0.032789156821391;
            r[15] = -0.577962071815846; s[15] =  0.155924143631693; w[15] = 0.032789156821391;
            r[16] = -0.784528785657457; s[16] = -0.784528785657457; w[16] = 0.029591814797299;
            r[17] =  0.569057571314915; s[17] = -0.784528785657457; w[17] = 0.029591814797299;
            r[18] = -0.784528785657457; s[18] =  0.569057571314915; w[18] = 0.029591814797299;
            r[19] = -0.921861824324395; s[19] = -0.921861824324395; w[19] = 0.009158564555409;
            r[20] =  0.843723648648789; s[20] = -0.921861824324395; w[20] = 0.009158564555409;
            r[21] = -0.921861824324395; s[21] =  0.843723648648789; w[21] = 0.009158564555409;
            r[22] = -0.977651240541341; s[22] = -0.977651240541341; w[22] = 0.003303653031152;
            r[23] =  0.955302481082681; s[23] = -0.977651240541341; w[23] = 0.003303653031152;
            r[24] = -0.977651240541341; s[24] =  0.955302481082681; w[24] = 0.003303653031152;
            r[25] = -0.872900668183296; s[25] =  0.862201431808621; w[25] = 0.004698341817151;
            r[26] =  0.862201431808621; s[26] = -0.872900668183296; w[26] = 0.004698341817151;
            r[27] = -0.989300763625325; s[27] =  0.862201431808621; w[27] = 0.004698341817151;
            r[28] =  0.862201431808621; s[28] = -0.989300763625325; w[28] = 0.004698341817151;
            r[29] = -0.989300763625325; s[29] = -0.872900668183295; w[29] = 0.004698341817151;
            r[30] = -0.872900668183295; s[30] = -0.989300763625325; w[30] = 0.004698341817151;
            r[31] = -0.685786162118586; s[31] =  0.669876527986188; w[31] = 0.008931851508364;
            r[32] =  0.669876527986188; s[32] = -0.685786162118586; w[32] = 0.008931851508364;
            r[33] = -0.984090365867602; s[33] =  0.669876527986188; w[33] = 0.008931851508364;
            r[34] =  0.669876527986188; s[34] = -0.984090365867602; w[34] = 0.008931851508364;
            r[35] = -0.984090365867602; s[35] = -0.685786162118586; w[35] = 0.008931851508364;
            r[36] = -0.685786162118586; s[36] = -0.984090365867602; w[36] = 0.008931851508364;
            r[37] = -0.208715771271252; s[37] =  0.187870974708724; w[37] = 0.012199133615816;
            r[38] =  0.187870974708724; s[38] = -0.208715771271252; w[38] = 0.012199133615816;
            r[39] = -0.979155203437472; s[39] =  0.187870974708724; w[39] = 0.012199133615816;
            r[40] =  0.187870974708724; s[40] = -0.979155203437472; w[40] = 0.012199133615816;
            r[41] = -0.979155203437472; s[41] = -0.208715771271252; w[41] = 0.012199133615816;
            r[42] = -0.208715771271252; s[42] = -0.979155203437472; w[42] = 0.012199133615816;
            r[43] = -0.453664858574179; s[43] =  0.431736028981932; w[43] = 0.013782162654376;
            r[44] =  0.431736028981932; s[44] = -0.453664858574179; w[44] = 0.013782162654376;
            r[45] = -0.978071170407753; s[45] =  0.431736028981932; w[45] = 0.013782162654376;
            r[46] =  0.431736028981932; s[46] = -0.978071170407753; w[46] = 0.013782162654376;
            r[47] = -0.978071170407753; s[47] = -0.453664858574179; w[47] = 0.013782162654376;
            r[48] = -0.453664858574179; s[48] = -0.978071170407753; w[48] = 0.013782162654376;
            r[49] = -0.796429235029966; s[49] =  0.719295810859041; w[49] = 0.015994950144956;
            r[50] =  0.719295810859041; s[50] = -0.796429235029966; w[50] = 0.015994950144956;
            r[51] = -0.922866575829075; s[51] =  0.719295810859041; w[51] = 0.015994950144956;
            r[52] =  0.719295810859041; s[52] = -0.922866575829075; w[52] = 0.015994950144956;
            r[53] = -0.922866575829075; s[53] = -0.796429235029966; w[53] = 0.015994950144956;
            r[54] = -0.796429235029966; s[54] = -0.922866575829075; w[54] = 0.015994950144956;
            r[55] = -0.106682901647172; s[55] =  0.035521886012736; w[55] = 0.014772268570672;
            r[56] =  0.035521886012736; s[56] = -0.106682901647172; w[56] = 0.014772268570672;
            r[57] = -0.928838984365563; s[57] =  0.035521886012736; w[57] = 0.014772268570672;
            r[58] =  0.035521886012736; s[58] = -0.928838984365563; w[58] = 0.014772268570672;
            r[59] = -0.928838984365564; s[59] = -0.106682901647172; w[59] = 0.014772268570672;
            r[60] = -0.106682901647172; s[60] = -0.928838984365564; w[60] = 0.014772268570672;
            r[61] = -0.601978411700994; s[61] =  0.502636778975466; w[61] = 0.025598663757297;
            r[62] =  0.502636778975466; s[62] = -0.601978411700994; w[62] = 0.025598663757297;
            r[63] = -0.900658367274472; s[63] =  0.502636778975466; w[63] = 0.025598663757297;
            r[64] =  0.502636778975466; s[64] = -0.900658367274472; w[64] = 0.025598663757297;
            r[65] = -0.900658367274472; s[65] = -0.601978411700994; w[65] = 0.025598663757297;
            r[66] = -0.601978411700994; s[66] = -0.900658367274472; w[66] = 0.025598663757297;
            r[67] = -0.351477632615435; s[67] =  0.234438182446771; w[67] = 0.034516142351393;
            r[68] =  0.234438182446771; s[68] = -0.351477632615435; w[68] = 0.034516142351393;
            r[69] = -0.882960549831337; s[69] =  0.234438182446771; w[69] = 0.034516142351393;
            r[70] =  0.234438182446771; s[70] = -0.882960549831337; w[70] = 0.034516142351393;
            r[71] = -0.882960549831337; s[71] = -0.351477632615435; w[71] = 0.034516142351393;
            r[72] = -0.351477632615435; s[72] = -0.882960549831337; w[72] = 0.034516142351393;
            r[73] = -0.582937273579734; s[73] =  0.339941699570946; w[73] = 0.037345891805871;
            r[74] =  0.339941699570946; s[74] = -0.582937273579734; w[74] = 0.037345891805871;
            r[75] = -0.757004425991211; s[75] =  0.339941699570946; w[75] = 0.037345891805871;
            r[76] =  0.339941699570946; s[76] = -0.757004425991211; w[76] = 0.037345891805871;
            r[77] = -0.757004425991211; s[77] = -0.582937273579734; w[77] = 0.037345891805871;
            r[78] = -0.582937273579734; s[78] = -0.757004425991211; w[78] = 0.037345891805871;
            r[79] = -0.353658866927485; s[79] =  0.072237177039608; w[79] = 0.045636448116791;
            r[80] =  0.072237177039608; s[80] = -0.353658866927485; w[80] = 0.045636448116791;
            r[81] = -0.718578310112123; s[81] =  0.072237177039608; w[81] = 0.045636448116791;
            r[82] =  0.072237177039608; s[82] = -0.718578310112123; w[82] = 0.045636448116791;
            r[83] = -0.718578310112123; s[83] = -0.353658866927485; w[83] = 0.045636448116791;
            r[84] = -0.353658866927485; s[84] = -0.718578310112123; w[84] = 0.045636448116791;
          break;
        }
    }

    for (int i = 0; i < nIntegrationPoint; ++i)
    {
        r[i] = 0.5 * (r[i] + 1.0);
        s[i] = 0.5 * (s[i] + 1.0);
        w[i] = 0.5 * (w[i]      );
    }
}

void HighOrderStandardElementBase::IntegrationPointsTetrahedron(void)
{
    /*--- Set the number of integration points, depending on the order of
          polynomials that must be integrated exactly. ---*/
    switch(integrationOrder)
    {
      case  0: nIntegrationPoint =   1; break;
      case  1: nIntegrationPoint =   1; break;
      case  2: nIntegrationPoint =   4; break;
      case  3: nIntegrationPoint =   8; break;
      case  4: nIntegrationPoint =  14; break;
      case  5: nIntegrationPoint =  14; break;
      case  6: nIntegrationPoint =  24; break;
      case  7: nIntegrationPoint =  35; break;
      case  8: nIntegrationPoint =  46; break;
      case  9: nIntegrationPoint =  59; break;
      case 10: nIntegrationPoint =  81; break;
      default:
        //notation MPI
          cout << "Error : HighOrderStandardElementBase has wrong integrationOrder " << endl;
    }
    
    /*--- Allocate the memory for the integration points and their weights. ---*/
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    ztIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);
    
    /*--- Set the pointers to the data arrays of the variables just allocated, such
          that the names are shorter. This is useful for the code below. ---*/
    RDouble *r = xiIntegration.data();
    RDouble *s = etIntegration.data();
    RDouble *t = ztIntegration.data();
    RDouble *w = wtIntegration.data();
    
    /*--- Set the data for the integration points, depending on the order.
          These integration rules are obtained with the open source program
          Polyquad, developed by Freddie Witherden.           ---*/
    switch(integrationOrder)
    {
        case  0:
        case  1:
        {
            r[0] = -0.500000000000000; s[0] = -0.500000000000000; t[0] = -0.500000000000000; w[0] = 1.333333333333333;
            break;
        }
        case  2:
        {
            r[0] =-0.723606797749979; s[0] = -0.723606797749979; t[0] = 0.1708203932499369; w[0] = 0.3333333333333333;
            r[1] =-0.723606797749979; s[1] = 0.1708203932499369; t[1] = -0.723606797749979; w[1] = 0.3333333333333333;
            r[2] = 0.170820393249937; s[2] = -0.723606797749979; t[2] = -0.723606797749979; w[2] = 0.3333333333333333;
            r[3] =-0.723606797749979; s[3] = -0.723606797749979; t[3] = -0.723606797749979; w[3] = 0.3333333333333333;
            break;
        }
        case  3:
        {
            r[0] =-0.7860119704589262; s[0] =-0.7860119704589262; t[0] = 0.3580359113767786; w[0] = 0.1487451997767295;
            r[1] =-0.7860119704589262; s[1] = 0.3580359113767786; t[1] =-0.7860119704589262; w[1] = 0.1487451997767295;
            r[2] = 0.3580359113767786; s[2] =-0.7860119704589262; t[2] =-0.7860119704589262; w[2] = 0.1487451997767295;
            r[3] =-0.7860119704589262; s[3] =-0.7860119704589262; t[3] =-0.7860119704589262; w[3] = 0.1487451997767295;
            r[4] =-0.3438828566749746; s[4] =-0.3438828566749746; t[4] =-0.9683514299750762; w[4] = 0.1845881335566038;
            r[5] =-0.3438828566749746; s[5] =-0.9683514299750762; t[5] =-0.3438828566749746; w[5] = 0.1845881335566038;
            r[6] =-0.9683514299750762; s[6] =-0.3438828566749746; t[6] =-0.3438828566749746; w[6] = 0.1845881335566038;
            r[7] =-0.3438828566749746; s[7] =-0.3438828566749746; t[7] =-0.3438828566749746; w[7] = 0.1845881335566038;
            break;
        }
        case  4:
        case  5:
        {
            r[0]   = -0.8145294993782175; s[0]  = -0.8145294993782175; t[0]  =  0.4435884981346525; w[0]  = 0.09799072415514934;
            r[1]   = -0.8145294993782175; s[1]  =  0.4435884981346525; t[1]  = -0.8145294993782175; w[1]  = 0.09799072415514934;
            r[2]   =  0.4435884981346525; s[2]  = -0.8145294993782175; t[2]  = -0.8145294993782175; w[2]  = 0.09799072415514934;
            r[3]   = -0.8145294993782175; s[3]  = -0.8145294993782175; t[3]  = -0.8145294993782175; w[3]  = 0.09799072415514934;
            r[4]   = -0.3782281614733985; s[4]  = -0.3782281614733985; t[4]  = -0.8653155155798045; w[4]  =  0.1502505676240211;
            r[5]   = -0.3782281614733985; s[5]  = -0.8653155155798045; t[5]  = -0.3782281614733985; w[5]  =  0.1502505676240211;
            r[6]   = -0.8653155155798045; s[6]  = -0.3782281614733985; t[6]  = -0.3782281614733985; w[6]  =  0.1502505676240211;
            r[7]   = -0.3782281614733985; s[7]  = -0.3782281614733985; t[7]  = -0.3782281614733985; w[7]  =  0.1502505676240211;
            r[8]   =  -0.908992591748701; s[8]  =-0.09100740825129899; t[8]  =-0.09100740825129899; w[8]  =  0.0567280277027752;
            r[9]   =-0.09100740825129902; s[9]  =  -0.908992591748701; t[9]  =-0.09100740825129902; w[9]  =  0.0567280277027752;
            r[10]  =  -0.908992591748701; s[10] =  -0.908992591748701; t[10] =-0.09100740825129905; w[10] =  0.0567280277027752;
            r[11]  =  -0.908992591748701; s[11] =-0.09100740825129905; t[11] =  -0.908992591748701; w[11] =  0.0567280277027752;
            r[12]  =-0.09100740825129899; s[12] =  -0.908992591748701; t[12] =  -0.908992591748701; w[12] =  0.0567280277027752;
            r[13]  =-0.09100740825129902; s[13] =-0.09100740825129902; t[13] =  -0.908992591748701; w[13] =  0.0567280277027752;
            break;
        }
        case  6:
        {
            r[0]  =-0.5707942574816954; s[0]  =-0.5707942574816954; t[0]  =  -0.2876172275549138; w[0]  =  0.05323033367755636;
            r[1]  =-0.5707942574816954; s[1]  =-0.2876172275549138; t[1]  =  -0.5707942574816954; w[1]  =  0.05323033367755636;
            r[2]  =-0.2876172275549138; s[2]  =-0.5707942574816954; t[2]  =  -0.5707942574816954; w[2]  =  0.05323033367755636;
            r[3]  =-0.5707942574816954; s[3]  =-0.5707942574816954; t[3]  =  -0.5707942574816954; w[3]  =  0.05323033367755636;
            r[4]  =-0.3553242197154491; s[4]  =-0.3553242197154491; t[4]  =  -0.9340273408536528; w[4]  =  0.07380957539153983;
            r[5]  =-0.3553242197154491; s[5]  =-0.9340273408536528; t[5]  =  -0.3553242197154491; w[5]  =  0.07380957539153983;
            r[6]  =-0.9340273408536528; s[6]  =-0.3553242197154491; t[6]  =  -0.3553242197154491; w[6]  =  0.07380957539153983;
            r[7]  =-0.3553242197154491; s[7]  =-0.3553242197154491; t[7]  =  -0.3553242197154491; w[7]  =  0.07380957539153983;
            r[8]  =-0.9186520829307774; s[8]  =-0.9186520829307774; t[8]  =   0.7559562487923321; w[8]  =  0.01343628140709418;
            r[9]  =-0.9186520829307774; s[9]  = 0.7559562487923321; t[9]  =  -0.9186520829307774; w[9]  =  0.01343628140709418;
            r[10] = 0.7559562487923321; s[10] =-0.9186520829307774; t[10] =  -0.9186520829307774; w[10] =  0.01343628140709418;
            r[11] =-0.9186520829307774; s[11] =-0.9186520829307774; t[11] =  -0.9186520829307774; w[11] =  0.01343628140709418;
            r[12] = 0.2060113295832982; s[12] =-0.8726779962499649; t[12] =  -0.4606553370833684; w[12] =  0.06428571428571428;
            r[13] = 0.2060113295832982; s[13] =-0.8726779962499649; t[13] =  -0.8726779962499649; w[13] =  0.06428571428571428;
            r[14] =-0.8726779962499649; s[14] =-0.8726779962499649; t[14] =   0.2060113295832982; w[14] =  0.06428571428571428;
            r[15] =-0.4606553370833684; s[15] = 0.2060113295832982; t[15] =  -0.8726779962499649; w[15] =  0.06428571428571428;
            r[16] =-0.8726779962499649; s[16] =-0.4606553370833684; t[16] =   0.2060113295832982; w[16] =  0.06428571428571428;
            r[17] =-0.8726779962499649; s[17] = 0.2060113295832982; t[17] =  -0.8726779962499649; w[17] =  0.06428571428571428;
            r[18] =-0.4606553370833684; s[18] =-0.8726779962499649; t[18] =   0.2060113295832982; w[18] =  0.06428571428571428;
            r[19] =-0.8726779962499649; s[19] =-0.4606553370833684; t[19] =  -0.8726779962499649; w[19] =  0.06428571428571428;
            r[20] =-0.8726779962499649; s[20] =-0.8726779962499649; t[20] =  -0.4606553370833684; w[20] =  0.06428571428571428;
            r[21] =-0.8726779962499649; s[21] = 0.2060113295832982; t[21] =  -0.4606553370833684; w[21] =  0.06428571428571428;
            r[22] =-0.4606553370833684; s[22] =-0.8726779962499649; t[22] =  -0.8726779962499649; w[22] =  0.06428571428571428;
            r[23] = 0.2060113295832982; s[23] =-0.4606553370833684; t[23] =  -0.8726779962499649; w[23] =  0.06428571428571428;
            break;
        }
        case  7:
        {
            r[0]  =               -0.5; s[0]  =               -0.5; t[0]  =               -0.5; w[0]  =  0.1273137192855079;
            r[1]  =-0.3685977004435944; s[1]  =-0.3685977004435944; t[1]  =-0.8942068986692169; w[1]  = 0.05643944161328927;
            r[2]  =-0.3685977004435944; s[2]  =-0.8942068986692169; t[2]  =-0.3685977004435944; w[2]  = 0.05643944161328927;
            r[3]  =-0.8942068986692169; s[3]  =-0.3685977004435944; t[3]  =-0.3685977004435944; w[3]  = 0.05643944161328927;
            r[4]  =-0.3685977004435944; s[4]  =-0.3685977004435944; t[4]  =-0.3685977004435944; w[4]  = 0.05643944161328927;
            r[5]  =-0.1009796451967928; s[5]  =-0.8990203548032072; t[5]  =-0.8990203548032072; w[5]  = 0.04252923711047679;
            r[6]  =-0.8990203548032072; s[6]  =-0.1009796451967928; t[6]  =-0.8990203548032072; w[6]  = 0.04252923711047679;
            r[7]  =-0.1009796451967928; s[7]  =-0.1009796451967928; t[7]  =-0.8990203548032072; w[7]  = 0.04252923711047679;
            r[8]  =-0.1009796451967928; s[8]  =-0.8990203548032072; t[8]  =-0.1009796451967928; w[8]  = 0.04252923711047679;
            r[9]  =-0.8990203548032072; s[9]  =-0.1009796451967928; t[9]  =-0.1009796451967928; w[9]  = 0.04252923711047679;
            r[10] =-0.8990203548032072; s[10] =-0.8990203548032072; t[10] =-0.1009796451967928; w[10] = 0.04252923711047679;
            r[11] = 0.6216604821970968; s[11] =-0.9574690549170335; t[11] =-0.7067223723630298; w[11] = 0.01081436110653779;
            r[12] = 0.6216604821970968; s[12] =-0.9574690549170335; t[12] =-0.9574690549170335; w[12] = 0.01081436110653779;
            r[13] =-0.9574690549170335; s[13] =-0.9574690549170335; t[13] = 0.6216604821970968; w[13] = 0.01081436110653779;
            r[14] =-0.7067223723630298; s[14] = 0.6216604821970968; t[14] =-0.9574690549170335; w[14] = 0.01081436110653779;
            r[15] =-0.9574690549170335; s[15] =-0.7067223723630298; t[15] = 0.6216604821970968; w[15] = 0.01081436110653779;
            r[16] =-0.9574690549170335; s[16] = 0.6216604821970968; t[16] =-0.9574690549170335; w[16] = 0.01081436110653779;
            r[17] =-0.7067223723630298; s[17] =-0.9574690549170335; t[17] = 0.6216604821970968; w[17] = 0.01081436110653779;
            r[18] =-0.9574690549170335; s[18] =-0.7067223723630298; t[18] =-0.9574690549170335; w[18] = 0.01081436110653779;
            r[19] =-0.9574690549170335; s[19] =-0.9574690549170335; t[19] =-0.7067223723630298; w[19] = 0.01081436110653779;
            r[20] =-0.9574690549170335; s[20] = 0.6216604821970968; t[20] =-0.7067223723630298; w[20] = 0.01081436110653779;
            r[21] =-0.7067223723630298; s[21] =-0.9574690549170335; t[21] =-0.9574690549170335; w[21] = 0.01081436110653779;
            r[22] = 0.6216604821970968; s[22] =-0.7067223723630298; t[22] =-0.9574690549170335; w[22] = 0.01081436110653779;
            r[23] = 0.1503432751739998; s[23] =-0.6223323379479977; t[23] =-0.9056785992780041; w[23] = 0.04960950763777947;
            r[24] = 0.1503432751739997; s[24] =-0.6223323379479978; t[24] =-0.6223323379479978; w[24] = 0.04960950763777947;
            r[25] =-0.6223323379479977; s[25] =-0.6223323379479978; t[25] = 0.1503432751739997; w[25] = 0.04960950763777947;
            r[26] =-0.9056785992780041; s[26] = 0.1503432751739997; t[26] =-0.6223323379479978; w[26] = 0.04960950763777947;
            r[27] =-0.6223323379479978; s[27] =-0.9056785992780041; t[27] = 0.1503432751739997; w[27] = 0.04960950763777947;
            r[28] =-0.6223323379479977; s[28] = 0.1503432751739997; t[28] =-0.6223323379479978; w[28] = 0.04960950763777947;
            r[29] =-0.9056785992780041; s[29] =-0.6223323379479978; t[29] = 0.1503432751739997; w[29] = 0.04960950763777947;
            r[30] =-0.6223323379479978; s[30] =-0.9056785992780041; t[30] =-0.6223323379479978; w[30] = 0.04960950763777947;
            r[31] =-0.6223323379479978; s[31] =-0.6223323379479978; t[31] =-0.9056785992780041; w[31] = 0.04960950763777947;
            r[32] =-0.6223323379479978; s[32] = 0.1503432751739997; t[32] =-0.9056785992780041; w[32] = 0.04960950763777947;
            r[33] =-0.9056785992780041; s[33] =-0.6223323379479978; t[33] =-0.6223323379479978; w[33] = 0.04960950763777947;
            r[34] = 0.1503432751739998; s[34] =-0.9056785992780041; t[34] =-0.6223323379479977; w[34] = 0.04960950763777947;
            break;
        }
        case  8:
        {
            r[0]  =-0.6320721895815339; s[0]  =-0.6320721895815339; t[0]  =-0.1037834312553985; w[0]  =  0.07440058157405982;
            r[1]  =-0.6320721895815339; s[1]  =-0.1037834312553985; t[1]  =-0.6320721895815339; w[1]  =  0.07440058157405982;
            r[2]  =-0.1037834312553985; s[2]  =-0.6320721895815339; t[2]  =-0.6320721895815339; w[2]  =  0.07440058157405982;
            r[3]  =-0.6320721895815339; s[3]  =-0.6320721895815339; t[3]  =-0.6320721895815339; w[3]  =  0.07440058157405982;
            r[4]  = -0.923300199653955; s[4]  = -0.923300199653955; t[4]  = 0.7699005989618649; w[4]  = 0.007857765854252971;
            r[5]  = -0.923300199653955; s[5]  = 0.7699005989618649; t[5]  = -0.923300199653955; w[5]  = 0.007857765854252971;
            r[6]  =  0.769900598961865; s[6]  = -0.923300199653955; t[6]  = -0.923300199653955; w[6]  = 0.007857765854252971;
            r[7]  = -0.923300199653955; s[7]  = -0.923300199653955; t[7]  = -0.923300199653955; w[7]  = 0.007857765854252971;
            r[8]  =-0.8009956129757766; s[8]  =-0.8009956129757766; t[8]  = 0.4029868389273299; w[8]  =  0.03149884873824373;
            r[9]  =-0.8009956129757766; s[9]  = 0.4029868389273299; t[9]  =-0.8009956129757766; w[9]  =  0.03149884873824373;
            r[10] = 0.4029868389273298; s[10] =-0.8009956129757766; t[10] =-0.8009956129757766; w[10] =  0.03149884873824373;
            r[11] =-0.8009956129757766; s[11] =-0.8009956129757766; t[11] =-0.8009956129757766; w[11] =  0.03149884873824373;
            r[12] =-0.3707849034682734; s[12] =-0.3707849034682734; t[12] =-0.8876452895951799; w[12] =  0.05270161842714149;
            r[13] =-0.3707849034682734; s[13] =-0.8876452895951799; t[13] =-0.3707849034682734; w[13] =  0.05270161842714149;
            r[14] =-0.8876452895951799; s[14] =-0.3707849034682734; t[14] =-0.3707849034682734; w[14] =  0.05270161842714149;
            r[15] =-0.3707849034682734; s[15] =-0.3707849034682734; t[15] =-0.3707849034682734; w[15] =  0.05270161842714149;
            r[16] =-0.1260500583716688; s[16] =-0.8739499416283312; t[16] =-0.8739499416283312; w[16] =  0.04730584876233031;
            r[17] =-0.8739499416283312; s[17] =-0.1260500583716688; t[17] =-0.8739499416283312; w[17] =  0.04730584876233031;
            r[18] =-0.1260500583716688; s[18] =-0.1260500583716688; t[18] =-0.8739499416283312; w[18] =  0.04730584876233031;
            r[19] =-0.1260500583716688; s[19] =-0.8739499416283312; t[19] =-0.1260500583716688; w[19] =  0.04730584876233031;
            r[20] =-0.8739499416283312; s[20] =-0.1260500583716688; t[20] =-0.1260500583716688; w[20] =  0.04730584876233031;
            r[21] =-0.8739499416283312; s[21] =-0.8739499416283312; t[21] =-0.1260500583716688; w[21] =  0.04730584876233031;
            r[22] = 0.1583084315814429; s[22] =-0.5906770163268148; t[22] =-0.9769543989278133; w[22] =   0.0223681938462459;
            r[23] = 0.1583084315814429; s[23] =-0.5906770163268148; t[23] =-0.5906770163268148; w[23] =   0.0223681938462459;
            r[24] =-0.5906770163268148; s[24] =-0.5906770163268148; t[24] = 0.1583084315814429; w[24] =   0.0223681938462459;
            r[25] =-0.9769543989278133; s[25] = 0.1583084315814429; t[25] =-0.5906770163268148; w[25] =   0.0223681938462459;
            r[26] =-0.5906770163268148; s[26] =-0.9769543989278133; t[26] = 0.1583084315814429; w[26] =   0.0223681938462459;
            r[27] =-0.5906770163268148; s[27] = 0.1583084315814429; t[27] =-0.5906770163268148; w[27] =   0.0223681938462459;
            r[28] =-0.9769543989278133; s[28] =-0.5906770163268148; t[28] = 0.1583084315814429; w[28] =   0.0223681938462459;
            r[29] =-0.5906770163268148; s[29] =-0.9769543989278133; t[29] =-0.5906770163268148; w[29] =   0.0223681938462459;
            r[30] =-0.5906770163268148; s[30] =-0.5906770163268148; t[30] =-0.9769543989278133; w[30] =   0.0223681938462459;
            r[31] =-0.5906770163268148; s[31] = 0.1583084315814429; t[31] =-0.9769543989278133; w[31] =   0.0223681938462459;
            r[32] =-0.9769543989278133; s[32] =-0.5906770163268148; t[32] =-0.5906770163268148; w[32] =   0.0223681938462459;
            r[33] = 0.1583084315814429; s[33] =-0.9769543989278133; t[33] =-0.5906770163268148; w[33] =   0.0223681938462459;
            r[34] = 0.4419106530449903; s[34] =-0.9563482048314847; t[34] =-0.5292142433820209; w[34] = 0.009603721352467381;
            r[35] = 0.4419106530449903; s[35] =-0.9563482048314847; t[35] =-0.9563482048314847; w[35] = 0.009603721352467381;
            r[36] =-0.9563482048314847; s[36] =-0.9563482048314847; t[36] = 0.4419106530449902; w[36] = 0.009603721352467381;
            r[37] =-0.5292142433820209; s[37] = 0.4419106530449903; t[37] =-0.9563482048314847; w[37] = 0.009603721352467381;
            r[38] =-0.9563482048314847; s[38] =-0.5292142433820209; t[38] = 0.4419106530449903; w[38] = 0.009603721352467381;
            r[39] =-0.9563482048314847; s[39] = 0.4419106530449902; t[39] =-0.9563482048314847; w[39] = 0.009603721352467381;
            r[40] =-0.5292142433820209; s[40] =-0.9563482048314847; t[40] = 0.4419106530449903; w[40] = 0.009603721352467381;
            r[41] =-0.9563482048314849; s[41] =-0.5292142433820208; t[41] =-0.9563482048314847; w[41] = 0.009603721352467381;
            r[42] =-0.9563482048314849; s[42] =-0.9563482048314847; t[42] =-0.5292142433820208; w[42] = 0.009603721352467381;
            r[43] =-0.9563482048314847; s[43] = 0.4419106530449903; t[43] =-0.5292142433820209; w[43] = 0.009603721352467381;
            r[44] =-0.5292142433820208; s[44] =-0.9563482048314847; t[44] =-0.9563482048314847; w[44] = 0.009603721352467381;
            r[45] = 0.4419106530449903; s[45] =-0.5292142433820209; t[45] =-0.9563482048314847; w[45] = 0.009603721352467381;
            break;
        }
        case  9:
        {
            r[0]  =                -0.5; s[0]  =                -0.5; t[0]  =                -0.5; w[0]  =  0.07327761647615459;
            r[1]  = -0.8198449760801311; s[1]  = -0.8198449760801311; t[1]  =   0.459534928240393; w[1]  = 0.002848036499465571;
            r[2]  = -0.8198449760801311; s[2]  =   0.459534928240393; t[2]  = -0.8198449760801311; w[2]  = 0.002848036499465571;
            r[3]  =   0.459534928240393; s[3]  = -0.8198449760801311; t[3]  = -0.8198449760801311; w[3]  = 0.002848036499465571;
            r[4]  = -0.8198449760801311; s[4]  = -0.8198449760801311; t[4]  = -0.8198449760801311; w[4]  = 0.002848036499465571;
            r[5]  = -0.9160617305090143; s[5]  = -0.9160617305090143; t[5]  =  0.7481851915270431; w[5]  =  0.00957623445188957;
            r[6]  = -0.9160617305090143; s[6]  =  0.7481851915270431; t[6]  = -0.9160617305090143; w[6]  =  0.00957623445188957;
            r[7]  =  0.7481851915270431; s[7]  = -0.9160617305090143; t[7]  = -0.9160617305090143; w[7]  =  0.00957623445188957;
            r[8]  = -0.9160617305090143; s[8]  = -0.9160617305090143; t[8]  = -0.9160617305090143; w[8]  =  0.00957623445188957;
            r[9]  = -0.3560564433877504; s[9]  = -0.3560564433877504; t[9]  = -0.9318306698367487; w[9]  =  0.04059381195379974;
            r[10] = -0.3560564433877504; s[10] = -0.9318306698367487; t[10] = -0.3560564433877504; w[10] =  0.04059381195379974;
            r[11] = -0.9318306698367487; s[11] = -0.3560564433877504; t[11] = -0.3560564433877504; w[11] =  0.04059381195379974;
            r[12] = -0.3560564433877504; s[12] = -0.3560564433877504; t[12] = -0.3560564433877504; w[12] =  0.04059381195379974;
            r[13] =  -0.658427438836176; s[13] =  -0.658427438836176; t[13] =-0.02471768349147202; w[13] =  0.03397956979508031;
            r[14] =  -0.658427438836176; s[14] =-0.02471768349147202; t[14] =  -0.658427438836176; w[14] =  0.03397956979508031;
            r[15] =-0.02471768349147199; s[15] =  -0.658427438836176; t[15] =  -0.658427438836176; w[15] =  0.03397956979508031;
            r[16] =  -0.658427438836176; s[16] =  -0.658427438836176; t[16] =  -0.658427438836176; w[16] =  0.03397956979508031;
            r[17] = -0.2129618822280694; s[17] = -0.7870381177719306; t[17] = -0.7870381177719306; w[17] =  0.04875647105046832;
            r[18] = -0.7870381177719306; s[18] = -0.2129618822280694; t[18] = -0.7870381177719306; w[18] =  0.04875647105046832;
            r[19] = -0.2129618822280694; s[19] = -0.2129618822280694; t[19] = -0.7870381177719306; w[19] =  0.04875647105046832;
            r[20] = -0.2129618822280694; s[20] = -0.7870381177719306; t[20] = -0.2129618822280694; w[20] =  0.04875647105046832;
            r[21] = -0.7870381177719306; s[21] = -0.2129618822280694; t[21] = -0.2129618822280694; w[21] =  0.04875647105046832;
            r[22] = -0.7870381177719306; s[22] = -0.7870381177719306; t[22] = -0.2129618822280694; w[22] =  0.04875647105046832;
            r[23] =                -1.0; s[23] =-0.07906724107645879; t[23] = -0.8418655178470824; w[23] =  0.01022387218776507;
            r[24] =                -1.0; s[24] =-0.07906724107645879; t[24] =-0.07906724107645879; w[24] =  0.01022387218776507;
            r[25] =-0.07906724107645879; s[25] =-0.07906724107645879; t[25] =                -1.0; w[25] =  0.01022387218776507;
            r[26] = -0.8418655178470824; s[26] =                -1.0; t[26] =-0.07906724107645879; w[26] =  0.01022387218776507;
            r[27] =-0.07906724107645879; s[27] = -0.8418655178470824; t[27] =                -1.0; w[27] =  0.01022387218776507;
            r[28] =-0.07906724107645879; s[28] =                -1.0; t[28] =-0.07906724107645879; w[28] =  0.01022387218776507;
            r[29] = -0.8418655178470824; s[29] =-0.07906724107645879; t[29] =                -1.0; w[29] =  0.01022387218776507;
            r[30] =-0.07906724107645879; s[30] = -0.8418655178470824; t[30] =-0.07906724107645879; w[30] =  0.01022387218776507;
            r[31] =-0.07906724107645879; s[31] =-0.07906724107645879; t[31] = -0.8418655178470824; w[31] =  0.01022387218776507;
            r[32] =-0.07906724107645879; s[32] =                -1.0; t[32] = -0.8418655178470824; w[32] =  0.01022387218776507;
            r[33] = -0.8418655178470824; s[33] =-0.07906724107645879; t[33] =-0.07906724107645879; w[33] =  0.01022387218776507;
            r[34] =                -1.0; s[34] = -0.8418655178470824; t[34] =-0.07906724107645879; w[34] =  0.01022387218776507;
            r[35] =  0.1968616506697061; s[35] = -0.6334882372417514; t[35] = -0.9298851761862033; w[35] =  0.02791006448800061;
            r[36] =  0.1968616506697061; s[36] = -0.6334882372417514; t[36] = -0.6334882372417514; w[36] =  0.02791006448800061;
            r[37] = -0.6334882372417514; s[37] = -0.6334882372417514; t[37] =  0.1968616506697061; w[37] =  0.02791006448800061;
            r[38] = -0.9298851761862033; s[38] =  0.1968616506697061; t[38] = -0.6334882372417514; w[38] =  0.02791006448800061;
            r[39] = -0.6334882372417514; s[39] = -0.9298851761862033; t[39] =  0.1968616506697061; w[39] =  0.02791006448800061;
            r[40] = -0.6334882372417514; s[40] =  0.1968616506697061; t[40] = -0.6334882372417514; w[40] =  0.02791006448800061;
            r[41] = -0.9298851761862033; s[41] = -0.6334882372417514; t[41] =  0.1968616506697061; w[41] =  0.02791006448800061;
            r[42] = -0.6334882372417514; s[42] = -0.9298851761862033; t[42] = -0.6334882372417514; w[42] =  0.02791006448800061;
            r[43] = -0.6334882372417514; s[43] = -0.6334882372417514; t[43] = -0.9298851761862033; w[43] =  0.02791006448800061;
            r[44] = -0.6334882372417514; s[44] =  0.1968616506697061; t[44] = -0.9298851761862033; w[44] =  0.02791006448800061;
            r[45] = -0.9298851761862033; s[45] = -0.6334882372417514; t[45] = -0.6334882372417514; w[45] =  0.02791006448800061;
            r[46] =  0.1968616506697061; s[46] = -0.9298851761862033; t[46] = -0.6334882372417514; w[46] =  0.02791006448800061;
            r[47] =  0.4372341714004844; s[47] = -0.9329857011557074; t[47] = -0.5712627690890695; w[47] =  0.01349325330368666;
            r[48] =  0.4372341714004844; s[48] = -0.9329857011557074; t[48] = -0.9329857011557074; w[48] =  0.01349325330368666;
            r[49] = -0.9329857011557074; s[49] = -0.9329857011557074; t[49] =  0.4372341714004844; w[49] =  0.01349325330368666;
            r[50] = -0.5712627690890695; s[50] =  0.4372341714004844; t[50] = -0.9329857011557074; w[50] =  0.01349325330368666;
            r[51] = -0.9329857011557074; s[51] = -0.5712627690890695; t[51] =  0.4372341714004844; w[51] =  0.01349325330368666;
            r[52] = -0.9329857011557074; s[52] =  0.4372341714004844; t[52] = -0.9329857011557074; w[52] =  0.01349325330368666;
            r[53] = -0.5712627690890695; s[53] = -0.9329857011557074; t[53] =  0.4372341714004844; w[53] =  0.01349325330368666;
            r[54] = -0.9329857011557074; s[54] = -0.5712627690890695; t[54] = -0.9329857011557074; w[54] =  0.01349325330368666;
            r[55] = -0.9329857011557074; s[55] = -0.9329857011557074; t[55] = -0.5712627690890695; w[55] =  0.01349325330368666;
            r[56] = -0.9329857011557074; s[56] =  0.4372341714004844; t[56] = -0.5712627690890695; w[56] =  0.01349325330368666;
            r[57] = -0.5712627690890695; s[57] = -0.9329857011557074; t[57] = -0.9329857011557074; w[57] =  0.01349325330368666;
            r[58] =  0.4372341714004844; s[58] = -0.5712627690890695; t[58] = -0.9329857011557074; w[58] =  0.01349325330368666;
            break;
        }
        case 10:
        {
            r[0]  =                -0.5; s[0]  =                -0.5; t[0]  =                -0.5; w[0]  =  0.06111729903668942;
            r[1]  = -0.3902379693282467; s[1]  = -0.3902379693282467; t[1]  =   -0.82928609201526; w[1]  =  0.03648653859255376;
            r[2]  = -0.3902379693282467; s[2]  =   -0.82928609201526; t[2]  = -0.3902379693282467; w[2]  =  0.03648653859255376;
            r[3]  =   -0.82928609201526; s[3]  = -0.3902379693282467; t[3]  = -0.3902379693282467; w[3]  =  0.03648653859255376;
            r[4]  = -0.3902379693282467; s[4]  = -0.3902379693282467; t[4]  = -0.3902379693282467; w[4]  =  0.03648653859255376;
            r[5]  = -0.8646773501288808; s[5]  = -0.8646773501288808; t[5]  =  0.5940320503866422; w[5]  =  0.01772043697176758;
            r[6]  = -0.8646773501288808; s[6]  =  0.5940320503866422; t[6]  = -0.8646773501288808; w[6]  =  0.01772043697176758;
            r[7]  =  0.5940320503866422; s[7]  = -0.8646773501288808; t[7]  = -0.8646773501288808; w[7]  =  0.01772043697176758;
            r[8]  = -0.8646773501288808; s[8]  = -0.8646773501288808; t[8]  = -0.8646773501288808; w[8]  =  0.01772043697176758;
            r[9]  = -0.9473346828260848; s[9]  =-0.05266531717391518; t[9]  =-0.05266531717391518; w[9]  =  0.00811057586155056;
            r[10] =-0.05266531717391519; s[10] = -0.9473346828260848; t[10] =-0.05266531717391519; w[10] =  0.00811057586155056;
            r[11] = -0.9473346828260848; s[11] = -0.9473346828260848; t[11] = -0.0526653171739152; w[11] =  0.00811057586155056;
            r[12] = -0.9473346828260848; s[12] = -0.0526653171739152; t[12] = -0.9473346828260848; w[12] =  0.00811057586155056;
            r[13] =-0.05266531717391515; s[13] = -0.9473346828260848; t[13] = -0.9473346828260848; w[13] =  0.00811057586155056;
            r[14] =-0.05266531717391519; s[14] =-0.05266531717391519; t[14] = -0.9473346828260848; w[14] =  0.00811057586155056;
            r[15] = -0.2038789111878272; s[15] = -0.7961210888121728; t[15] = -0.7961210888121728; w[15] =  0.03066711559292157;
            r[16] = -0.7961210888121728; s[16] = -0.2038789111878272; t[16] = -0.7961210888121728; w[16] =  0.03066711559292157;
            r[17] = -0.2038789111878272; s[17] = -0.2038789111878272; t[17] = -0.7961210888121728; w[17] =  0.03066711559292157;
            r[18] = -0.2038789111878272; s[18] = -0.7961210888121728; t[18] = -0.2038789111878272; w[18] =  0.03066711559292157;
            r[19] = -0.7961210888121728; s[19] = -0.2038789111878272; t[19] = -0.2038789111878272; w[19] =  0.03066711559292157;
            r[20] = -0.7961210888121728; s[20] = -0.7961210888121728; t[20] = -0.2038789111878272; w[20] =  0.03066711559292157;
            r[21] = 0.06411454763598279; s[21] = -0.6048469883044114; t[21] =   -0.85442057102716; w[21] =  0.03277830640502917;
            r[22] = 0.06411454763598282; s[22] = -0.6048469883044114; t[22] = -0.6048469883044114; w[22] =  0.03277830640502917;
            r[23] = -0.6048469883044114; s[23] = -0.6048469883044114; t[23] = 0.06411454763598282; w[23] =  0.03277830640502917;
            r[24] =   -0.85442057102716; s[24] = 0.06411454763598279; t[24] = -0.6048469883044114; w[24] =  0.03277830640502917;
            r[25] = -0.6048469883044114; s[25] =   -0.85442057102716; t[25] = 0.06411454763598279; w[25] =  0.03277830640502917;
            r[26] = -0.6048469883044114; s[26] = 0.06411454763598282; t[26] = -0.6048469883044114; w[26] =  0.03277830640502917;
            r[27] =   -0.85442057102716; s[27] = -0.6048469883044114; t[27] = 0.06411454763598279; w[27] =  0.03277830640502917;
            r[28] = -0.6048469883044114; s[28] =   -0.85442057102716; t[28] = -0.6048469883044114; w[28] =  0.03277830640502917;
            r[29] = -0.6048469883044114; s[29] = -0.6048469883044114; t[29] =   -0.85442057102716; w[29] =  0.03277830640502917;
            r[30] = -0.6048469883044114; s[30] = 0.06411454763598279; t[30] =   -0.85442057102716; w[30] =  0.03277830640502917;
            r[31] =   -0.85442057102716; s[31] = -0.6048469883044114; t[31] = -0.6048469883044114; w[31] =  0.03277830640502917;
            r[32] = 0.06411454763598279; s[32] =   -0.85442057102716; t[32] = -0.6048469883044114; w[32] =  0.03277830640502917;
            r[33] =  0.8117588817115982; s[33] =                -1.0; t[33] = -0.8117588817115982; w[33] = 0.001276432944056112;
            r[34] =  0.8117588817115982; s[34] =                -1.0; t[34] =                -1.0; w[34] = 0.001276432944056112;
            r[35] =                -1.0; s[35] =                -1.0; t[35] =  0.8117588817115982; w[35] = 0.001276432944056112;
            r[36] = -0.8117588817115982; s[36] =  0.8117588817115982; t[36] =                -1.0; w[36] = 0.001276432944056112;
            r[37] =                -1.0; s[37] = -0.8117588817115982; t[37] =  0.8117588817115982; w[37] = 0.001276432944056112;
            r[38] =                -1.0; s[38] =  0.8117588817115982; t[38] =                -1.0; w[38] = 0.001276432944056112;
            r[39] = -0.8117588817115982; s[39] =                -1.0; t[39] =  0.8117588817115982; w[39] = 0.001276432944056112;
            r[40] =                -1.0; s[40] = -0.8117588817115982; t[40] =                -1.0; w[40] = 0.001276432944056112;
            r[41] =                -1.0; s[41] =                -1.0; t[41] = -0.8117588817115982; w[41] = 0.001276432944056112;
            r[42] =                -1.0; s[42] =  0.8117588817115982; t[42] = -0.8117588817115982; w[42] = 0.001276432944056112;
            r[43] = -0.8117588817115982; s[43] =                -1.0; t[43] =                -1.0; w[43] = 0.001276432944056112;
            r[44] =  0.8117588817115982; s[44] = -0.8117588817115982; t[44] =                -1.0; w[44] = 0.001276432944056112;
            r[45] =  0.3854615068170896; s[45] = -0.6928701162511337; t[45] = -0.9997212743148225; w[45] = 0.006560363793425748;
            r[46] =  0.3854615068170896; s[46] = -0.6928701162511336; t[46] = -0.6928701162511336; w[46] = 0.006560363793425748;
            r[47] = -0.6928701162511337; s[47] = -0.6928701162511335; t[47] =  0.3854615068170896; w[47] = 0.006560363793425748;
            r[48] = -0.9997212743148225; s[48] =  0.3854615068170896; t[48] = -0.6928701162511335; w[48] = 0.006560363793425748;
            r[49] = -0.6928701162511335; s[49] = -0.9997212743148225; t[49] =  0.3854615068170896; w[49] = 0.006560363793425748;
            r[50] = -0.6928701162511337; s[50] =  0.3854615068170896; t[50] = -0.6928701162511335; w[50] = 0.006560363793425748;
            r[51] = -0.9997212743148225; s[51] = -0.6928701162511335; t[51] =  0.3854615068170896; w[51] = 0.006560363793425748;
            r[52] = -0.6928701162511337; s[52] = -0.9997212743148225; t[52] = -0.6928701162511337; w[52] = 0.006560363793425748;
            r[53] = -0.6928701162511337; s[53] = -0.6928701162511337; t[53] = -0.9997212743148225; w[53] = 0.006560363793425748;
            r[54] = -0.6928701162511335; s[54] =  0.3854615068170896; t[54] = -0.9997212743148225; w[54] = 0.006560363793425748;
            r[55] = -0.9997212743148225; s[55] = -0.6928701162511336; t[55] = -0.6928701162511336; w[55] = 0.006560363793425748;
            r[56] =  0.3854615068170896; s[56] = -0.9997212743148225; t[56] = -0.6928701162511337; w[56] = 0.006560363793425748;
            r[57] = -0.6460142846738401; s[57] = -0.1823369737573523; t[57] = -0.9893117678114551; w[57] =  0.01289761909705229;
            r[58] = -0.6460142846738401; s[58] = -0.1823369737573524; t[58] = -0.1823369737573524; w[58] =  0.01289761909705229;
            r[59] = -0.1823369737573524; s[59] = -0.1823369737573524; t[59] = -0.6460142846738401; w[59] =  0.01289761909705229;
            r[60] = -0.9893117678114551; s[60] = -0.6460142846738401; t[60] = -0.1823369737573524; w[60] =  0.01289761909705229;
            r[61] = -0.1823369737573524; s[61] = -0.9893117678114551; t[61] = -0.6460142846738401; w[61] =  0.01289761909705229;
            r[62] = -0.1823369737573524; s[62] = -0.6460142846738401; t[62] = -0.1823369737573524; w[62] =  0.01289761909705229;
            r[63] = -0.9893117678114551; s[63] = -0.1823369737573524; t[63] = -0.6460142846738401; w[63] =  0.01289761909705229;
            r[64] = -0.1823369737573523; s[64] = -0.9893117678114551; t[64] = -0.1823369737573523; w[64] =  0.01289761909705229;
            r[65] = -0.1823369737573523; s[65] = -0.1823369737573523; t[65] = -0.9893117678114551; w[65] =  0.01289761909705229;
            r[66] = -0.1823369737573524; s[66] = -0.6460142846738401; t[66] = -0.9893117678114551; w[66] =  0.01289761909705229;
            r[67] = -0.9893117678114551; s[67] = -0.1823369737573524; t[67] = -0.1823369737573524; w[67] =  0.01289761909705229;
            r[68] = -0.6460142846738401; s[68] = -0.9893117678114551; t[68] = -0.1823369737573523; w[68] =  0.01289761909705229;
            r[69] =  0.3166885452555603; s[69] = -0.9215201459821879; t[69] = -0.4736482532911847; w[69] =  0.01504744303648042;
            r[70] =  0.3166885452555603; s[70] = -0.9215201459821878; t[70] = -0.9215201459821878; w[70] =  0.01504744303648042;
            r[71] = -0.9215201459821878; s[71] = -0.9215201459821878; t[71] =  0.3166885452555603; w[71] =  0.01504744303648042;
            r[72] = -0.4736482532911847; s[72] =  0.3166885452555603; t[72] = -0.9215201459821878; w[72] =  0.01504744303648042;
            r[73] = -0.9215201459821878; s[73] = -0.4736482532911847; t[73] =  0.3166885452555603; w[73] =  0.01504744303648042;
            r[74] = -0.9215201459821878; s[74] =  0.3166885452555603; t[74] = -0.9215201459821878; w[74] =  0.01504744303648042;
            r[75] = -0.4736482532911847; s[75] = -0.9215201459821878; t[75] =  0.3166885452555603; w[75] =  0.01504744303648042;
            r[76] = -0.9215201459821878; s[76] = -0.4736482532911847; t[76] = -0.9215201459821878; w[76] =  0.01504744303648042;
            r[77] = -0.9215201459821878; s[77] = -0.9215201459821878; t[77] = -0.4736482532911847; w[77] =  0.01504744303648042;
            r[78] = -0.9215201459821878; s[78] =  0.3166885452555603; t[78] = -0.4736482532911847; w[78] =  0.01504744303648042;
            r[79] = -0.4736482532911847; s[79] = -0.9215201459821878; t[79] = -0.9215201459821878; w[79] =  0.01504744303648042;
            r[80] =  0.3166885452555603; s[80] = -0.4736482532911847; t[80] = -0.9215201459821879; w[80] =  0.01504744303648042;
            break;
        }
    }

    for (int i = 0; i < nIntegrationPoint; ++i)
    {
        r[i] = 0.5 * (r[i] + 1.0);
        s[i] = 0.5 * (s[i] + 1.0);
        t[i] = 0.5 * (t[i] + 1.0);
        w[i] = 0.75* (w[i]      );
    }
}

void HighOrderStandardElementBase::IntegrationPointsPyramid(void)
{
/*--- The 3D quadrature rule for a pyramid is obtained by transforming the
      standard pyramid into a standard hexahedron by means of the Duffy
      transformation. On the created hexahedron a tensor product rule is used,
      but in the t-direction a Gauss-Jacobi rule with alpha = 2, beta = 0 is
      used to account for the transformation from the pyramid to the
      hexahedron. The determinant of the Jacobian of this transformation
      is 0.25*(1-t)^2, which explains the alpha = 2 in the Gauss-Jacobi.
      Determine the number of integration points in 1D, which is stored in M,
      and the actual integration 1D integration points. ---*/
    unsigned short M = integrationOrder/2 + 1;

    vector<RDouble> GLPoints(M), GLWeights(M);
    GaussLegendrePoints1D(GLPoints, GLWeights);

    vector<RDouble> GJPoints(M), GJWeights(M);

    switch(M)    //! copy from MOOSE
    {
        case  1:
        {
            GJPoints[0]  = 0.25;
            GJWeights[0] = 1./3.;
            break;
        }
        case  2:
        {
            GJPoints[ 0] =1.225148226554413e-01;
            GJPoints[ 1] =5.441518440112252e-01;
            GJWeights[ 0]=2.325474512535079e-01;
            GJWeights[ 1]=1.007858820798254e-01;
            break;
        }
        case  3:
        {
            GJPoints[ 0] =7.299402407314973e-02;
            GJPoints[ 1] =3.470037660383518e-01;
            GJPoints[ 2] =7.050022098884983e-01;
            GJWeights[ 0]=1.571363610648866e-01;
            GJWeights[ 1]=1.462462692598660e-01;
            GJWeights[ 2]=2.995070300858069e-02;
            break;
        }
        default:
        {
            CGaussJacobiQuadrature GaussJacobi;
            GaussJacobi.GetQuadraturePoints(2.0, 0.0, 0, 1.0, GJPoints, GJWeights);
        }
    }

    for (unsigned short i=0; i<M; ++i)
    {
        GJWeights[i] *= 3;
    }

    /*--- Allocate the memory for the integration points and weights
          of the pyramid and determine them.                ---*/
    nIntegrationPoint = M*M*M;
    xiIntegration.resize(nIntegrationPoint);
    etIntegration.resize(nIntegrationPoint);
    ztIntegration.resize(nIntegrationPoint);
    wtIntegration.resize(nIntegrationPoint);
    
    unsigned int ii = 0;
    for (unsigned short k=0; k<M; ++k)
    {
        for (unsigned short j=0; j<M; ++j)
        {
            for (unsigned short i=0; i<M; ++i, ++ii)
            {
                const RDouble xi   = GLPoints[i];
                const RDouble eta  = GLPoints[j];
                const RDouble zeta = GJPoints[k];
                //xiIntegration[ii] = 0.5*(1.0-zeta)*xi;
                //etIntegration[ii] = 0.5*(1.0-zeta)*eta;
                //wtIntegration[ii] = 0.25*GLWeights[i]*GLWeights[j]*GJWeights[k];
                //xiIntegration[ii] = 0.5+(1.0-zeta)*(xi-0.5);
                //etIntegration[ii] = 0.5+(1.0-zeta)*(eta-0.5);
                xiIntegration[ii] = xi;
                etIntegration[ii] = eta;
                ztIntegration[ii] = zeta;
                wtIntegration[ii] = GLWeights[i]*GLWeights[j]*GJWeights[k];
            }
        }
    }
}

/*----------------------------------------------------------------------------------  */
/*          Private member functions of HighOrderStandardElementBase.               */
/*----------------------------------------------------------------------------------  */
void HighOrderStandardElementBase::GaussLegendrePoints1D(vector<RDouble> & GLPoints, vector<RDouble> & GLWeights)
{
    /*--- Set the number of integration points, depending on the order of
    polynomials that must be integrated exactly. ---*/
    //switch(integrationOrder)
    //{
    //case  0:
    //case  1: nIntegrationPoint =   1; break;
    //case  2: 
    //case  3: nIntegrationPoint =   2; break;
    //case  4: 
    //case  5: nIntegrationPoint =   3; break;
    //case  6: 
    //case  7: nIntegrationPoint =   4; break;
    //case  8: 
    //case  9: nIntegrationPoint =   5; break;
    //case 10: 
    //case 11: nIntegrationPoint =   6; break;
    //case 12: 
    //case 13: nIntegrationPoint =   7; break;
    //default:
    //notation MPI
    //cout << "Error : HighOrderStandardElementBase has wrong integrationOrder " << endl;
    //}

    /*--- Set the pointers to the data arrays of the variables just allocated, such
          that the names are shorter. This is useful for the code below. ---*/
    RDouble * r = GLPoints.data();
    RDouble * w = GLWeights.data();

    /*--- Set the data for the integration points, depending on the order.
          These integration rules come from the Matlab codes corresponding to
          the book "Nodal Discontinuous Methods: Algorithms, Analysis, and Applications"
          by Jan S. Hesthaven and Tim Warburton. ---*/
    switch(integrationOrder)
    {
        case  0:
        case  1:
        {
            r[0] =  0.500000000000000; w[0] = 1.000000000000000;
            break;
        }
        case  2:
        case  3:
        {
            r[0] =  0.211324865405187; w[0] = 0.500000000000000;
            r[1] =  0.788675134594812; w[1] = 0.500000000000000;
            break;
        }
        case  4:
        case  5:
        {
            r[0] =  0.112701665379258; w[0] = 0.277777777777778;
            r[1] =  0.500000000000000; w[1] = 0.444444444444444;
            r[2] =  0.887298334620741; w[2] = 0.277777777777778;
            break;
        }
        case  6:
        case  7:
        {
            r[0] =  0.069431844202973; w[0] = 0.173927422568726;
            r[1] =  0.330009478207571; w[1] = 0.326072577431273;
            r[2] =  0.669990521792428; w[2] = 0.326072577431273;
            r[3] =  0.930568155797026; w[3] = 0.173927422568726;
            break;
        }
        default:
        {
            /* The class used to determine the integration points. Allocate the memory for the help vectors. */
            vector<RDouble> GLPointsPas(GLPoints.size());
            vector<RDouble> GLWeightsPas(GLWeights.size());

            /* Gauss Legendre quadrature is a special case of Gauss Jacobi integration.
            Determine the integration points for this case. */
            CGaussJacobiQuadrature GaussJacobi;
            GaussJacobi.GetQuadraturePoints(0.0, 0.0, 0.0, 1.0, GLPointsPas, GLWeightsPas);

            /* Copy the data back into GLPoints and GLWeights. */
            for (unsigned long i=0; i<GLPoints.size(); ++i)
            {
                GLPoints[i]  = GLPointsPas[i];
                GLWeights[i] = GLWeightsPas[i];
            }
        }
    }
}

void HighOrderStandardElementBase::Copy(const HighOrderStandardElementBase &other)
{
    VTK_Type          = other.VTK_Type;
    integrationOrder  = other.integrationOrder;
    nIntegrationPoint = other.nIntegrationPoint;
    constJacobian     = other.constJacobian;

    xiIntegration = other.xiIntegration;
    etIntegration = other.etIntegration;
    ztIntegration = other.ztIntegration;
    wtIntegration = other.wtIntegration;
}

typedef Eigen::Matrix<RDouble, Eigen::Dynamic, Eigen::Dynamic> HighOrderMatrix;

void Orthogonalize(int degreeOfFreedom, const HighOrderMatrix &taylorBasisMassMatrix, 
                   HighOrderMatrix &orthogonalizationMatrix)
{
    orthogonalizationMatrix(0, 0) = 1.0 / sqrt(taylorBasisMassMatrix(0, 0));
    HighOrderMatrix upperMatrix(degreeOfFreedom, degreeOfFreedom);
    upperMatrix.setConstant(0.0);

    for (int n = 1; n < degreeOfFreedom; ++ n)
    {
        RDouble rhs[ 10 ];

        for (int i = 0; i < n; ++ i)
        {
            rhs[ i ] = 0.0;
            for (int j = 0; j <= i; ++ j)    //! rhs[ i ] = - fai_i * b_n;
            {
                rhs[ i ] -= orthogonalizationMatrix(i, j) * taylorBasisMassMatrix(n, j);
            }
            // upperMatrix(i, n - 1) = fai_i * b_n - 1;// upperMatrix(i, n - 1) = 0.0;
            for (int k = 0; k <= i; ++ k)
            {
                upperMatrix(i, n - 1) += orthogonalizationMatrix(i, k) * taylorBasisMassMatrix(n - 1, k);
            }
        }

        RDouble thisRow[ 10 ];
        for (int i = n-1; i >= 0; -- i)
        {
            thisRow[ i ] = rhs[ i ];
            for (int j = i + 1; j < n; ++ j)
                thisRow[ i ] -= upperMatrix(i, j) * thisRow[ j ];

            thisRow[ i ] /= upperMatrix(i, i);
        }

        thisRow[ n ] = 1.0;
        RDouble normal = 0.0;
        for (int i = 0; i <= n; ++ i)
        {
            for (int j = 0; j < i; ++ j)
            {
                normal += thisRow[ i ] * thisRow[ j ] * taylorBasisMassMatrix(i, j);
            }
            for (int j = i; j <= n; ++ j)
            {
                normal += thisRow[ i ] * thisRow[ j ] * taylorBasisMassMatrix(j, i);
            }
        }

        RDouble temp = 1.0 / sqrt(normal);
        for (int i = 0; i <= n; ++ i)
            orthogonalizationMatrix(n, i) = thisRow[ i ] * temp;
    }
}

void HighOrderStandardElementBase::ComputeOrthogoMatrix()
{
    int degreeOfFreedom;
    switch(VTK_Type)
    {
        case HOUnstruct::QUADRILATERAL: degreeOfFreedom = 6;    break;
        case HOUnstruct::HEXAHEDRON:    degreeOfFreedom = 10;   break;
        default: break;
    }

    //HighOrderMatrix taylorBasisMassMatrix(degreeOfFreedom, degreeOfFreedom);
    //HighOrderMatrix orthogonalizationMatrix(degreeOfFreedom, degreeOfFreedom, 0.0);

    //Orthogonalize(degreeOfFreedom, taylorBasisMassMatrix, orthogonalizationMatrix);
}

}

#include <iostream>
#include <cmath>
//using namespace std;

//using namespace HOUnstruct;

namespace HOUnstruct
{

void TestOrthogoMatrix()
{
    HighOrderStandardElementBase elem(TRIANGLE, 6);

    int degreeOfFreedom = 10;

    HighOrderMatrix taylorBasisMassMatrix(degreeOfFreedom, degreeOfFreedom);
    taylorBasisMassMatrix.setConstant(0.0);

    const RDouble * xi = elem.GetXiIntegrationCoor();
    const RDouble * et = elem.GetEtIntegrationCoor();
    const RDouble * wt = elem.GetWtIntegration();

    std::cout << "taylorBasisMassMatrix:" << std::endl;
    for (int iIntegratPoint = 0; iIntegratPoint < elem.GetNumberOfIntegrationPoint(); ++iIntegratPoint)
    {
        RDouble refCoord[2];
        refCoord[0] = xi[iIntegratPoint];
        refCoord[1] = et[iIntegratPoint];

        RDouble basis[10];

        for (int idof = 0; idof < degreeOfFreedom; ++idof)
        {
            basis[idof] = MonomialBasis2d(refCoord, idof);
        }

        for (int idof = 0; idof < degreeOfFreedom; ++idof)
        {
            //for (int jdof = 0; jdof < degreeOfFreedom; ++jdof)
            for (int jdof = 0; jdof <= idof; ++jdof)
            {
                taylorBasisMassMatrix(idof, jdof) += basis[idof] * basis[jdof] * wt[iIntegratPoint];
            }
        }
    }

    for (int idof = 0; idof < degreeOfFreedom; ++idof)
    {
        //for (int jdof = 0; jdof < degreeOfFreedom; ++jdof)
        for (int jdof = idof+1; jdof < degreeOfFreedom; ++jdof)
        {
            taylorBasisMassMatrix(idof, jdof) = taylorBasisMassMatrix(jdof, idof);
        }
    }

    std::cout << taylorBasisMassMatrix << std::endl;

    HighOrderMatrix orthogonalizationMatrix(degreeOfFreedom, degreeOfFreedom);
    orthogonalizationMatrix.setConstant(0.0);

    Orthogonalize(degreeOfFreedom, taylorBasisMassMatrix, orthogonalizationMatrix);

    std::cout << "orthogonalizationMatrix:" << std::endl;
    std::cout << orthogonalizationMatrix << std::endl;

    std::cout << "after orthogonalized BasisMassMatrix:" << std::endl;
    taylorBasisMassMatrix.setConstant(0.0);
    for (int iIntegratPoint = 0; iIntegratPoint < elem.GetNumberOfIntegrationPoint(); ++iIntegratPoint)
    {
        RDouble refCoord[3];
        refCoord[0] = xi[iIntegratPoint];
        refCoord[1] = et[iIntegratPoint];

        RDouble originalBasis[10];

        for (int idof = 0; idof < degreeOfFreedom; ++idof)
        {
            originalBasis[idof] = MonomialBasis2d(refCoord, idof);
        }

        RDouble basis[10];
        for (int idof = 0; idof < degreeOfFreedom; ++idof)
        {
            basis[idof] = 0.0;

            for (int jdof = 0; jdof <= idof; ++jdof)
            {
                basis[idof] += orthogonalizationMatrix(idof, jdof) * originalBasis[jdof];
            }
        }

        for (int idof = 0; idof < degreeOfFreedom; ++idof)
        {
            //for (int jdof = 0; jdof < degreeOfFreedom; ++jdof)
            for (int jdof = 0; jdof <= idof; ++jdof)
            {
                taylorBasisMassMatrix(idof, jdof) += basis[idof] * basis[jdof] * wt[iIntegratPoint];
            }
        }
    }

    for (int idof = 0; idof < degreeOfFreedom; ++idof)
    {
        //for (int jdof = 0; jdof < degreeOfFreedom; ++jdof)
        for (int jdof = idof+1; jdof < degreeOfFreedom; ++jdof)
        {
            taylorBasisMassMatrix(idof, jdof) = taylorBasisMassMatrix(jdof, idof);
        }
    }

    std::cout << taylorBasisMassMatrix << std::endl;
    std::cout << std::endl;
}

//! @ the function of HighOrderStandardCell definition
/*
HighOrderStandardCell::HighOrderStandardCell(unsigned short VTK_Type, unsigned short integrationOrder):HighOrderStandardElementBase()
{

}
*/

bool HighOrderStandardCell::SameStandardElement(unsigned short val_VTK_Type, unsigned short val_nPoly, unsigned short valIntegrationOrder) 
{
    if (val_VTK_Type        != VTK_Type        )    return false;
    if (val_nPoly           != nPoly           )    return false;
    if (valIntegrationOrder != integrationOrder)    return false;
    return true;
}

/*----------------------------------------------------------------------------------*/
/*           Private member functions of HighOrderStandardCell.                       */
/*----------------------------------------------------------------------------------*/

void HighOrderStandardCell::Copy(const HighOrderStandardCell &other) 
{
    HighOrderStandardElementBase::Copy(other);

    nPoly = other.nPoly;
    nNodes = other.nNodes;

    connFace0 = other.connFace0;
    connFace1 = other.connFace1;
    connFace2 = other.connFace2;
    connFace3 = other.connFace3;
    connFace4 = other.connFace4;
    connFace5 = other.connFace5;

    vertexXi = other.vertexXi;
    vertexEt = other.vertexEt;
    vertexZt = other.vertexZt;

    shapeFunctionAtIntegration   = other.shapeFunctionAtIntegration;
    dXiShapeFunctionAtIntegration = other.dXiShapeFunctionAtIntegration;
    dEtShapeFunctionAtIntegration = other.dEtShapeFunctionAtIntegration;
    dZtShapeFunctionAtIntegration  = other.dZtShapeFunctionAtIntegration;
}

HighOrderStandardCell::HighOrderStandardCell(unsigned short VTK_Type, unsigned short nCellNodes, unsigned short integrationOrder) : 
    HighOrderStandardElementBase(VTK_Type, integrationOrder)
{
    /*--- Copy the function arguments to the member variables. ---*/

    //nPoly = val_nPoly;
    //! @define the node of HighOrderStandardCell
    nNodes = nCellNodes;

    /*--- Determine the element type and compute the other member variables. ---*/
    switch(VTK_Type)
    {
        case HOUnstruct::TETRAHEDRON:
            DataStandardTetrahedron();
            break;
        case HOUnstruct::PYRAMID:
            DataStandardPyramid();
            break;
        case HOUnstruct::PRISM:
            DataStandardPrism();
            break;
        case HOUnstruct::HEXAHEDRON:
            DataStandardHexahedron();
            break;
        default:
            break;
    }
}

//! @brief Function, which creates all the data for a tetrahedral element.
void HighOrderStandardCell::DataStandardTetrahedron(void)
{
    /*--- Determine the shape functions and its derivatives in the integration points. ---*/
    const RDouble refCoordOfTetrNodes2[10][3] =
    {
        { 0.0, 0.0, 0.0 }, { 1.0, 0.0, 0.0 }, { 0.0, 1.0, 0.0 }, { 0.0, 0.0, 1.0 },    //! 4 corner points
        { 0.5, 0.0, 0.0 }, { 0.5, 0.5, 0.0 }, { 0.0, 0.5, 0.0 },
        { 0.0, 0.0, 0.5 }, { 0.5, 0.0, 0.5 }, { 0.0, 0.5, 0.5 }
    };

    if (nNodes == 4)
    {
        nPoly = 1;
        nNodes = 4;
    }
    else // if (nNodes == 10) //
    {
        nPoly = 2;
        nNodes = 10;
    }

    vertexXi.resize(nNodes);
    vertexEt.resize(nNodes);
    vertexZt.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++ iCornerPoint)
    {
        vertexXi[iCornerPoint] = refCoordOfTetrNodes2[iCornerPoint][0];
        vertexEt[iCornerPoint] = refCoordOfTetrNodes2[iCornerPoint][1];
        vertexZt[iCornerPoint] = refCoordOfTetrNodes2[iCornerPoint][2];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[3];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! the number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [3*dofOfShapeFunction];    //! the number of shape function equal to nNodes

    shapeFunctionAtIntegration.resize(nIntegrationPoint);
    dXiShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dEtShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dZtShapeFunctionAtIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
        case 1:  //! @linear element
            //  shapeFunctionAtIntegration
            for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
            {
                shapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                dXiShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dEtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dZtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];
                CoordIntegrationOfStand[2] = ztIntegration[iGaussPoint];

                //! @get shape Function At Integration
                ShapeFunctionOfTetr(CoordIntegrationOfStand, ret);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    shapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction];    //! the number of shape function equal to nNodes
                }

                //! @get the grad of shape Function At Integration
                int curDofOfShape = 0;
                ShapeFunctionOfTetrGrad(dShapeFun);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    dXiShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dEtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dZtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                }
            }
            break;
        default:
            break;
    }

    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

//! @brief Function, which creates all the data for a Pyramid element.
void HighOrderStandardCell::DataStandardPyramid(void) 
{
/*--- Determine the shape functions and its derivatives in the integration points. ---*/
    const RDouble refCoordOfPyraNodes[5][3] = 
    {
        { 0.0, 0.0, 0.0 }, { 1.0, 0.0, 0.0 }, { 1.0, 1.0, 0.0 }, { 0.0, 1.0, 0.0 },    //! 4 corner points @ lower surface
        { 0.0, 0.0, 1.0 } // 1 corner points @ upper surface
    };

    if (nNodes == 5)
    {
        nPoly = 1;
        nNodes = 5;
    }
    else    //! if (nNodes == 13)
    {
        nPoly = 1;
        nNodes = 5;
    }

    vertexXi.resize(nNodes);
    vertexEt.resize(nNodes);
    vertexZt.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++ iCornerPoint)
    {
        vertexXi[iCornerPoint] = refCoordOfPyraNodes[iCornerPoint][0];
        vertexEt[iCornerPoint] = refCoordOfPyraNodes[iCornerPoint][1];
        vertexZt[iCornerPoint] = refCoordOfPyraNodes[iCornerPoint][2];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[3];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! cthe number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [3*dofOfShapeFunction];    //! the number of shape function equal to nNodes

    shapeFunctionAtIntegration.resize(nIntegrationPoint);
    dXiShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dEtShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dZtShapeFunctionAtIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
        case 1:    //! @linear element
            //! shapeFunctionAtIntegration
            for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
            {
                shapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                dXiShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dEtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dZtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];
                CoordIntegrationOfStand[2] = ztIntegration[iGaussPoint];

                //! @get shape Function At Integration
                ShapeFunctionOfPyra(CoordIntegrationOfStand, ret);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    shapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction]; //the number of shape function equal to nNodes
                }

                //! @get the grad of shape Function At Integration
                int curDofOfShape = 0;
                ShapeFunctionOfPyraGrad(CoordIntegrationOfStand, dShapeFun);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    dXiShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dEtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dZtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                }
            }
            break;
        case 2:  //! @quadratic element
            //  shapeFunctionAtIntegration
            cout << "Need add code for pyramid quadratic element" << endl;
            break;
        default:
            break;
    }

    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

//! @brief Function, which creates all the data for a Prim element.
void HighOrderStandardCell::DataStandardPrism(void)
{

    /*--- Determine the shape functions and its derivatives in the integration points. ---*/
    const RDouble refCoordOfPrismNodes2[15][3] = 
    {
        { 0.0, 0.0, 0.0 },    //! 6 corner points
        { 1.0, 0.0, 0.0 },
        { 0.0, 1.0, 0.0 },
        { 0.0, 0.0, 1.0 },
        { 1.0, 0.0, 1.0 },
        { 0.0, 1.0, 1.0 },
        { 0.5, 0.0, 0.0 },    //! 3 edge mid-points @ lower surface
        { 0.5, 0.5, 0.0 },
        { 0.0, 0.5, 0.0 },
        { 0.0, 0.0, 0.5 },    //! 3 edge mid-points @ vertical edge
        { 1.0, 0.0, 0.5 },
        { 0.0, 1.0, 0.5 },
        { 0.5, 0.0, 1.0 },    //! 3 edge mid-points @ upper surface
        { 0.5, 0.5, 1.0 },
        { 0.0, 0.5, 1.0 }
    };

    if (nNodes == 6)
    {
        nPoly = 1;
        nNodes = 6;
    }
    else //if (nNodes == 15)
    {
        nPoly = 2;
        nNodes = 15;
    }

    vertexXi.resize(nNodes);
    vertexEt.resize(nNodes);
    vertexZt.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++iCornerPoint)
    {
        vertexXi[iCornerPoint] = refCoordOfPrismNodes2[iCornerPoint][0];
        vertexEt[iCornerPoint] = refCoordOfPrismNodes2[iCornerPoint][1];
        vertexZt[iCornerPoint] = refCoordOfPrismNodes2[iCornerPoint][2];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[3];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! the number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [3*dofOfShapeFunction];   //! the number of shape function equal to nNodes

    shapeFunctionAtIntegration.resize(nIntegrationPoint);
    dXiShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dEtShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dZtShapeFunctionAtIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
        case 1:  //! @linear element
            //  shapeFunctionAtIntegration
            for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
            {
                shapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                dXiShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dEtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dZtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];
                CoordIntegrationOfStand[2] = ztIntegration[iGaussPoint];

                //! @get shape Function At Integration
                ShapeFunctionOfPrism(CoordIntegrationOfStand, ret);           
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    shapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction]; //the number of shape function equal to nNodes
                }

                //! @get the grad of shape Function At Integration
                int curDofOfShape = 0;
                ShapeFunctionOfPrismGrad(CoordIntegrationOfStand, dShapeFun);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    dXiShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dEtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dZtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                }
            }
            break;
        default:
            break;
    }

    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

//! @brief Function, which creates all the data for a Hexahedron element.
void HighOrderStandardCell::DataStandardHexahedron(void)
{

    /*--- Determine the shape functions and its derivatives in the integration points. ---*/
    //const RDouble refCoordOfHexNodes2[20][3] = 
    //{
    //    { 0.0, 0.0, 0.0 }, { 1.0, 0.0, 0.0 }, { 1.0, 1.0, 0.0 }, { 0.0, 1.0, 0.0 }, // 4 corner points @ lower surface
    //    { 0.0, 0.0, 1.0 }, { 1.0, 0.0, 1.0 }, { 1.0, 1.0, 1.0 }, { 0.0, 1.0, 1.0 }, // 4 corner points @ upper surface
    //    { 0.5, 0.0, 0.0 }, { 1.0, 0.5, 0.0 }, { 0.5, 1.0, 0.0 }, { 0.0, 0.5, 0.0 }, // 4 edge mid-points @ lower surface
    //    { 0.0, 0.0, 0.5 }, { 1.0, 0.0, 0.5 }, { 1.0, 1.0, 0.5 }, { 0.0, 1.0, 0.5 }, // 4 edge mid-points @ vertical surface
    //    { 0.5, 0.0, 1.0 }, { 1.0, 0.5, 1.0 }, { 0.5, 1.0, 1.0 }, { 0.0, 0.5, 1.0 }  // 4 edge mid-points @ upper surface
    //};

    const RDouble refCoordOfHexNodes2[27][3] = 
    {
        { 0.0, 0.0, 0.0 }, { 1.0, 0.0, 0.0 }, { 1.0, 1.0, 0.0 }, { 0.0, 1.0, 0.0 },    //! 4 corner points @ lower surface
        { 0.0, 0.0, 1.0 }, { 1.0, 0.0, 1.0 }, { 1.0, 1.0, 1.0 }, { 0.0, 1.0, 1.0 },    //! 4 corner points @ upper surface
        { 0.5, 0.0, 0.0 }, { 1.0, 0.5, 0.0 }, { 0.5, 1.0, 0.0 }, { 0.0, 0.5, 0.0 },    //! 4 edge mid-points @ lower surface
        { 0.0, 0.0, 0.5 }, { 1.0, 0.0, 0.5 }, { 1.0, 1.0, 0.5 }, { 0.0, 1.0, 0.5 },    //! 4 edge mid-points @ vertical surface
        { 0.5, 0.0, 1.0 }, { 1.0, 0.5, 1.0 }, { 0.5, 1.0, 1.0 }, { 0.0, 0.5, 1.0 },    //! 4 edge mid-points @ upper surface
        { 0.5, 0.5, 0.0 },                                                             //! 1 face mid-points @ lower surface
        { 0.5, 0.0, 0.5 }, { 1.0, 0.5, 0.5 }, { 0.5, 1.0, 0.5 }, { 0.0, 0.5, 0.5 },    //! 4 edge mid-points @ mid-surface
        { 0.5, 0.5, 1.0 },                                                             //! 1 face mid-points @ upper surface
        { 0.5, 0.5, 0.5 }                                                              //! 1 cell mid-points
    };

    if (nNodes == 8)
    {
        nPoly = 1;
        nNodes = 8;
    }
    else    //! if (nNodes == 20)
    {
        nPoly = 2;
        nNodes = 27;
    }

    vertexXi.resize(nNodes);
    vertexEt.resize(nNodes);
    vertexZt.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++iCornerPoint)
    {
        vertexXi[iCornerPoint] = refCoordOfHexNodes2[iCornerPoint][0];
        vertexEt[iCornerPoint] = refCoordOfHexNodes2[iCornerPoint][1];
        vertexZt[iCornerPoint] = refCoordOfHexNodes2[iCornerPoint][2];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[3];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! the number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [3*dofOfShapeFunction];    //! the number of shape function equal to nNodes

    shapeFunctionAtIntegration.resize(nIntegrationPoint);
    dXiShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dEtShapeFunctionAtIntegration.resize(nIntegrationPoint);
    dZtShapeFunctionAtIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
        case 1:  //! @linear element
            //  shapeFunctionAtIntegration
            for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
            {
                shapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                dXiShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dEtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dZtShapeFunctionAtIntegration[iGaussPoint].resize(dofOfShapeFunction);

                CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];
                CoordIntegrationOfStand[2] = ztIntegration[iGaussPoint];

                //! @get shape Function At Integration
                ShapeFunctionOfHex(CoordIntegrationOfStand, ret);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    shapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction]; //the number of shape function equal to nNodes
                }
                //! @get the grad of shape Function At Integration
                int curDofOfShape = 0;
                ShapeFunctionOfHexGrad(CoordIntegrationOfStand, dShapeFun);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    dXiShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dEtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dZtShapeFunctionAtIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                }
            }
            break;
        default:
            break;
    }

    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

bool HighOrderStandardFace::SameStandardElement(unsigned short val_VTK_Type, unsigned short val_nPoly, unsigned short valIntegrationOrder) 
{
    if (val_VTK_Type        != VTK_Type        )    return false;
    if (val_nPoly           != nPoly           )    return false;
    if (valIntegrationOrder != integrationOrder)    return false;
    return true;
}

/*----------------------------------------------------------------------------------*/
/*           Private member functions of HighOrderStandardCell.                       */
/*----------------------------------------------------------------------------------*/

void HighOrderStandardFace::Copy(const HighOrderStandardFace &other) 
{
    HighOrderStandardElementBase::Copy(other);

    nPoly = other.nPoly;
    nNodes = other.nNodes;  

    vertexXiFace = other.vertexXiFace;
    vertexEtFace = other.vertexEtFace;

    shapeFuncAtFaceIntegration   = other.shapeFuncAtFaceIntegration;
    dXiShapeFuncFaceIntegration = other.dXiShapeFuncFaceIntegration;
    dEtShapeFuncFaceIntegration = other.dEtShapeFuncFaceIntegration;
}

HighOrderStandardFace::HighOrderStandardFace(unsigned short VTK_Type, unsigned short nFaceNodes, unsigned short integrationOrder) : 
    HighOrderStandardElementBase(VTK_Type, integrationOrder)
{
    /*--- Copy the function arguments to the member variables. ---*/

    //nPoly = val_nPoly;
    nNodes = nFaceNodes;

    /*--- Determine the element type and compute the other member variables. ---*/
    switch(VTK_Type)
    {
        case TRIANGLE:
            DataStandardTriangle();
            break;
        case QUADRILATERAL:
            DataStandardQuadrilateral();
            break;
        default:
            break;
    }
}

//! @brief Function, which creates all the data for a triangle element.
void HighOrderStandardFace::DataStandardTriangle(void)
{
/*--- Determine the shape functions and its derivatives in the integration points. ---*/
    const RDouble refCoordOfTriNodes2[6][2] =
    {
        { 0.0, 0.0 },    //! 3 corner points
        { 1.0, 0.0 },
        { 0.0, 1.0 },
        { 0.5, 0.0 },    //! 3 edge mid-points
        { 0.5, 0.5 },
        { 0.0, 0.5 }
    };

    if (nNodes == 3)
    {
        nPoly = 1;
        nNodes = 3;
    }
    else    //! if (nNodes == 6)
    {
        nPoly = 2;
        nNodes = 6;
    }

    vertexXiFace.resize(nNodes);
    vertexEtFace.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++iCornerPoint)
    {
        vertexXiFace[iCornerPoint] = refCoordOfTriNodes2[iCornerPoint][0];
        vertexEtFace[iCornerPoint] = refCoordOfTriNodes2[iCornerPoint][1];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[2];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! the number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [2*dofOfShapeFunction];    //! the number of shape function equal to nNodes

    shapeFuncAtFaceIntegration.resize(nIntegrationPoint);
    dXiShapeFuncFaceIntegration.resize(nIntegrationPoint);
    dEtShapeFuncFaceIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
         case 1:    //! @linear element
             //! shapeFunctionAtIntegration
             for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
             {
                 shapeFuncAtFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);

                 dXiShapeFuncFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);
                 dEtShapeFuncFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);

                 CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                 CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];

                 //! @get shape Function At Integration
                 ShapeFunctionOfTri(CoordIntegrationOfStand, ret);
                 for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                 {
                     shapeFuncAtFaceIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction];    //! the number of shape function equal to nNodes
                 }

                 //! @get the grad of shape Function At Integration
                 int curDofOfShape = 0;
                 ShapeFunctionOfTriGrad(dShapeFun);
                 for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                 {
                     dXiShapeFuncFaceIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                     dEtShapeFuncFaceIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                 }
             }
             break;
         default:
             break;
    }
    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

//! @brief Function, which creates all the data for a Quadrilateral element.
void HighOrderStandardFace::DataStandardQuadrilateral(void)
{
    /*--- Determine the shape functions and its derivatives in the integration points. ---*/
    const RDouble refCoordOfQuadNodes2[8][2] =
    {
        { 0.0, 0.0 },    //! 4 corner points
        { 1.0, 0.0 },
        { 1.0, 1.0 },
        { 0.0, 1.0 },
        { 0.5, 0.0 },    //! 4 edge mid-points
        { 1.0, 0.5 },
        { 0.5, 1.0 },
        { 0.0, 0.5 }
    };

    if (nNodes == 4)
    {
        nPoly = 1;
        nNodes = 4;
    }
    else    //! if (nNodes == 8)
    {
        nPoly = 2;
        nNodes = 8;
    }

    vertexXiFace.resize(nNodes);
    vertexEtFace.resize(nNodes);

    for (int iCornerPoint = 0; iCornerPoint < nNodes; ++iCornerPoint)
    {
        vertexXiFace[iCornerPoint] = refCoordOfQuadNodes2[iCornerPoint][0];
        vertexEtFace[iCornerPoint] = refCoordOfQuadNodes2[iCornerPoint][1];
    }

    const int dofOfShapeFunction = nNodes;
    RDouble CoordIntegrationOfStand[2];
    RDouble *ret = new RDouble [dofOfShapeFunction];    //! the number of shape function equal to nNodes
    RDouble *dShapeFun = new RDouble [2*dofOfShapeFunction];    //! the number of shape function equal to nNodes

    shapeFuncAtFaceIntegration.resize(nIntegrationPoint);
    dXiShapeFuncFaceIntegration.resize(nIntegrationPoint);
    dEtShapeFuncFaceIntegration.resize(nIntegrationPoint);

    switch(nPoly)
    {
        case 1:  //! @linear element
            //  shapeFunctionAtIntegration
            for (int iGaussPoint = 0; iGaussPoint < nIntegrationPoint; ++ iGaussPoint)
            {
                shapeFuncAtFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);
        
                dXiShapeFuncFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);
                dEtShapeFuncFaceIntegration[iGaussPoint].resize(dofOfShapeFunction);

                CoordIntegrationOfStand[0] = xiIntegration[iGaussPoint];
                CoordIntegrationOfStand[1] = etIntegration[iGaussPoint];

                //! @get shape Function At Integration
                ShapeFunctionOfQuad(CoordIntegrationOfStand, ret);           
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    shapeFuncAtFaceIntegration[iGaussPoint][iDofShapeFunction] = ret[iDofShapeFunction];    //! the number of shape function equal to nNodes
                }

                //! @get the grad of shape Function At Integration
                int curDofOfShape = 0;
                ShapeFunctionOfQuadGrad(CoordIntegrationOfStand, dShapeFun);
                for (int iDofShapeFunction = 0; iDofShapeFunction < dofOfShapeFunction; ++ iDofShapeFunction)
                {
                    dXiShapeFuncFaceIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                    dEtShapeFuncFaceIntegration[iGaussPoint][iDofShapeFunction] = dShapeFun[curDofOfShape++];
                }
            }
            break;
        default:
            break;
    }
    delete [] ret;    ret = nullptr;
    delete [] dShapeFun;    dShapeFun = nullptr;
}

}

